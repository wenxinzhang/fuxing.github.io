<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁的几种实现方式</title>
      <link href="/dslock.html"/>
      <url>/dslock.html</url>
      
        <content type="html"><![CDATA[<p>** 分布式锁的几种实现方式：** &lt;Excerpt in index | 首页摘要&gt;<br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p><h2 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h2><ol><li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li><li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li><li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li><li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li></ol><h2 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h2><ol><li><p>数据库实现</p></li><li><p>缓存实现，比如redis</p></li><li><p>zookeeper实现</p></li></ol><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统理论基础</title>
      <link href="/dsbasic.html"/>
      <url>/dsbasic.html</url>
      
        <content type="html"><![CDATA[<p>** 分布式系统理论基础：** &lt;Excerpt in index | 首页摘要&gt;<br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p><ul><li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li><li>Availability（可用性），好的响应性能。</li><li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li></ul><p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p><ol><li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li><li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li><li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li><li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li></ol><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><ul><li>Basically Available 基本可用，支持分区失败</li><li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li><li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li></ul><h2 id="paxos协议"><a href="#paxos协议" class="headerlink" title="paxos协议"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p><h3 id="Paxos的两个组件"><a href="#Paxos的两个组件" class="headerlink" title="Paxos的两个组件:"></a>Paxos的两个组件:</h3><ul><li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li><li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li></ul><h3 id="Paxos有两个原则"><a href="#Paxos有两个原则" class="headerlink" title="Paxos有两个原则"></a>Paxos有两个原则</h3><ol><li>安全原则—保证不能做错的事<ul><li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li><li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li></ul></li><li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul><li>a）最终会批准某个被提议的值；</li><li>b）一个值被批准了，其他服务器最终会学习到这个值。</li></ul></li></ol><h2 id="zab协议-ZooKeeper-Atomic-broadcast-protocol"><a href="#zab协议-ZooKeeper-Atomic-broadcast-protocol" class="headerlink" title="zab协议(ZooKeeper Atomic broadcast protocol)"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p><h3 id="Phase-0-Leader-election（选举阶段）"><a href="#Phase-0-Leader-election（选举阶段）" class="headerlink" title="Phase 0: Leader election（选举阶段）"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p><h3 id="Phase-1-Discovery（发现阶段）"><a href="#Phase-1-Discovery（发现阶段）" class="headerlink" title="Phase 1: Discovery（发现阶段）"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p><h3 id="Phase-2-Synchronization（同步阶段）"><a href="#Phase-2-Synchronization（同步阶段）" class="headerlink" title="Phase 2: Synchronization（同步阶段）"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p><h3 id="Phase-3-Broadcast（广播阶段）"><a href="#Phase-3-Broadcast（广播阶段）" class="headerlink" title="Phase 3: Broadcast（广播阶段）"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p><h2 id="raft协议"><a href="#raft协议" class="headerlink" title="raft协议"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p><h3 id="follower"><a href="#follower" class="headerlink" title="follower"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p><h3 id="candidate"><a href="#candidate" class="headerlink" title="candidate"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p><h3 id="leader"><a href="#leader" class="headerlink" title="leader"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p><pre><code>1. 复制日志到所有follower结点(replicate entry)2. 大部分结点响应时才提交日志3. 通知所有follower结点日志已提交4. 所有follower也提交日志5. 现在整个系统处于一致的状态</code></pre><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protocol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么使用zookeeper？</title>
      <link href="/zookeeper.html"/>
      <url>/zookeeper.html</url>
      
        <content type="html"><![CDATA[<p>** 为什么使用zookeeper？：** &lt;Excerpt in index | 首页摘要&gt;<br>随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="zookeeper是什么？"><a href="#zookeeper是什么？" class="headerlink" title="zookeeper是什么？"></a>zookeeper是什么？</h2><p>zookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。</p><h2 id="zookeeper的特性"><a href="#zookeeper的特性" class="headerlink" title="zookeeper的特性"></a>zookeeper的特性</h2><ul><li>顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。</li><li>原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。</li><li>可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。</li><li>实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。</li></ul><h2 id="zookeeper的原理？"><a href="#zookeeper的原理？" class="headerlink" title="zookeeper的原理？"></a>zookeeper的原理？</h2><p>基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。</p><h2 id="zookeeper的数据模型"><a href="#zookeeper的数据模型" class="headerlink" title="zookeeper的数据模型"></a>zookeeper的数据模型</h2><ul><li>持久化节点，节点创建后一直存在，直到主动删除。</li><li>持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。</li><li>临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。</li><li>临时有序节点，临时节点基础上多一个顺序性特性。</li></ul><h2 id="zookeeper使用场景有哪些？"><a href="#zookeeper使用场景有哪些？" class="headerlink" title="zookeeper使用场景有哪些？"></a>zookeeper使用场景有哪些？</h2><ul><li>订阅发布<ul><li>watcher机制</li><li>统一配置管理(disconf)</li></ul></li><li>分布式锁（redis也可以）</li><li>分布式队列</li><li>负载均衡(dubbo)</li><li>ID生成器</li><li>master选举(kafka,hadoop,hbase)</li></ul><h2 id="集群角色有哪些？"><a href="#集群角色有哪些？" class="headerlink" title="集群角色有哪些？"></a>集群角色有哪些？</h2><h3 id="leader"><a href="#leader" class="headerlink" title="leader"></a>leader</h3><ol><li>事务请求的唯一调度者和处理者，保证集群事务的处理顺序</li><li>集群内部服务的调度者</li></ol><h3 id="follower"><a href="#follower" class="headerlink" title="follower"></a>follower</h3><ol><li>处理非事务请求，以及转发事务请求到leader</li><li>参与事务请求提议的投票</li><li>参与leader选举的投票</li></ol><h3 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h3><ol><li>观察集群中最新状态的变化并同步到observer服务器上</li><li>增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力</li></ol><h2 id="zookeeper集群为什么是奇数？"><a href="#zookeeper集群为什么是奇数？" class="headerlink" title="zookeeper集群为什么是奇数？"></a>zookeeper集群为什么是奇数？</h2><p>zookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，<br>由于在增删改操作中需要半数以上服务器通过，来分析以下情况。<br>2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉<br>3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉<br>4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉<br>5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉<br>6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉</p><h2 id="zookeeper日志管理？"><a href="#zookeeper日志管理？" class="headerlink" title="zookeeper日志管理？"></a>zookeeper日志管理？</h2><h2 id="leader选举的原理"><a href="#leader选举的原理" class="headerlink" title="leader选举的原理"></a>leader选举的原理</h2><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找链表倒数第n个元素</title>
      <link href="/descNode.html"/>
      <url>/descNode.html</url>
      
        <content type="html"><![CDATA[<p>** 查找链表倒数第n个元素：** &lt;Excerpt in index | 首页摘要&gt;<br>链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="单向链表的定义"><a href="#单向链表的定义" class="headerlink" title="单向链表的定义"></a>单向链表的定义</h2><p>单向链表，主要有数据存储，下一个节点的引用这两个元素组成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Node &#123;</span><br><span class="line">    int value;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    Node(int value) &#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历倒数第n个元素"><a href="#遍历倒数第n个元素" class="headerlink" title="遍历倒数第n个元素"></a>遍历倒数第n个元素</h2><p>在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，<br>然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置<br>算法复杂度为o（n）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public Node findDescEle(Node head, int k) &#123;</span><br><span class="line">    if (k &lt; 1 || head == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p1 = head;</span><br><span class="line">    Node p2 = head;</span><br><span class="line">    //前移k-1步</span><br><span class="line">    int step = 0;</span><br><span class="line">    for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">        step++;</span><br><span class="line">        if (p1.next != null) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (p1 != null) &#123;</span><br><span class="line">        step++;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;o(n)==&quot; + step);</span><br><span class="line">    return p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sprigmvc项目转为springboot</title>
      <link href="/sprigmvc2boot.html"/>
      <url>/sprigmvc2boot.html</url>
      
        <content type="html"><![CDATA[<p>** sprigmvc项目转为springboot：** &lt;Excerpt in index | 首页摘要&gt;<br>是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。</li><li>本教程适用于spring+springmvc+mybatis+shiro的maven项目。</li></ul><h2 id="1-修改pom文件依赖"><a href="#1-修改pom文件依赖" class="headerlink" title="1.修改pom文件依赖"></a>1.修改pom文件依赖</h2><ol><li><p>删除之前的spring依赖，添加springboot依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 这个是剔除掉自带的 tomcat部署的--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat容器部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 支持 @ConfigurationProperties 注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加springboot构建插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-添加application启动文件"><a href="#2-添加application启动文件" class="headerlink" title="2.添加application启动文件"></a>2.添加application启动文件</h2><p>注意，如果Application在controller，service，dao的上一层包里，无需配置<code>@ComponentScan</code>,<br>否则，需要指明要扫描的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;"com.cms.controller","com.cms.service","com.cms.dao"&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-添加springboot配置文件"><a href="#3-添加springboot配置文件" class="headerlink" title="3.添加springboot配置文件"></a>3.添加springboot配置文件</h2><ol><li>在resources下面添加application.properties文件</li><li>添加基本配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#默认前缀</span><br><span class="line">server.contextPath=/</span><br><span class="line"># 指定环境</span><br><span class="line">spring.profiles.active=local</span><br><span class="line"># jsp配置</span><br><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br><span class="line">#log配置文件</span><br><span class="line">logging.config=classpath:logback-cms.xml</span><br><span class="line">#log路径</span><br><span class="line">logging.path=/Users/mac/work-tommy/cms-springboot/logs/</span><br><span class="line">#数据源</span><br><span class="line">spring.datasource.name=adminDataSource</span><br><span class="line">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/mycms?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 123456</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-使用-Configuration注入配置"><a href="#4-使用-Configuration注入配置" class="headerlink" title="4.使用@Configuration注入配置"></a>4.使用@Configuration注入配置</h2><ol><li><p>注入mybatis配置,分页插件请自主选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.kuwo.dao"</span>,sqlSessionTemplateRef  = <span class="string">"adminSqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">adminDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminSqlSessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">adminSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"adminDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line"><span class="comment">//        PageHelper pageHelper = new PageHelper();</span></span><br><span class="line">        PagePlugin pagePlugin = <span class="keyword">new</span> PagePlugin();</span><br><span class="line"><span class="comment">//        Properties props = new Properties();</span></span><br><span class="line"><span class="comment">//        props.setProperty("reasonable", "true");</span></span><br><span class="line"><span class="comment">//        props.setProperty("supportMethodsArguments", "true");</span></span><br><span class="line"><span class="comment">//        props.setProperty("returnPageInfo", "check");</span></span><br><span class="line"><span class="comment">//        props.setProperty("params", "count=countSql");</span></span><br><span class="line"><span class="comment">//        pageHelper.setProperties(props);</span></span><br><span class="line">        <span class="comment">//添加插件</span></span><br><span class="line">        bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pagePlugin&#125;);</span><br><span class="line">        <span class="comment">// 添加mybatis配置文件</span></span><br><span class="line">        bean.setConfigLocation(<span class="keyword">new</span> DefaultResourceLoader().getResource(<span class="string">"classpath:mybatis/mybatis-config.xml"</span>));</span><br><span class="line">        <span class="comment">// 添加mybatis映射文件</span></span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/system/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminTransactionManager"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">adminTransactionManager</span><span class="params">(@Qualifier(<span class="string">"adminDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminSqlSessionTemplate"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">adminSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"adminSqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加shiro配置文件</p><ul><li>注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title">getLifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</span></span><br><span class="line"><span class="comment">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在</span></span><br><span class="line"><span class="comment">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     Filter Chain定义说明</span></span><br><span class="line"><span class="comment">     1、一个URL可以配置多个Filter，使用逗号分隔</span></span><br><span class="line"><span class="comment">     2、当设置多个过滤器时，全部验证通过，才视为通过</span></span><br><span class="line"><span class="comment">     3、部分过滤器可指定参数，如perms，roles</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ShiroConfiguration.shirFilter()"</span>);</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean  = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须设置 SecurityManager</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login_toLogin"</span>);</span><br><span class="line">        <span class="comment">// 登录成功后要跳转的链接</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/usersPage"</span>);</span><br><span class="line">        <span class="comment">//未授权界面;</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line">        <span class="comment">//拦截器.</span></span><br><span class="line">        Map&lt;String,String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login_toLogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login_login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/static/login/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/static/js/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/uploadFiles/uploadImgs/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/code.do"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/font-awesome/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></span><br><span class="line">        <span class="comment">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></span><br><span class="line"></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//设置realm.</span></span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        <span class="comment">// 自定义缓存实现 使用redis</span></span><br><span class="line">        <span class="comment">//securityManager.setCacheManager(cacheManager());</span></span><br><span class="line">        <span class="comment">// 自定义session管理 使用redis</span></span><br><span class="line">        securityManager.setSessionManager(sessionManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroRealm <span class="title">myShiroRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroRealm myShiroRealm = <span class="keyword">new</span> ShiroRealm();</span><br><span class="line"><span class="comment">//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span></span><br><span class="line">        <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  开启shiro aop注解支持.</span></span><br><span class="line"><span class="comment">     *  使用代理方式;所以需要开启代码支持;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置shiro redisManager</span></span><br><span class="line"><span class="comment">     * 使用的是shiro-redis开源插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisManager <span class="title">redisManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisManager redisManager = <span class="keyword">new</span> RedisManager();</span><br><span class="line">        redisManager.setHost(host);</span><br><span class="line">        redisManager.setPort(port);</span><br><span class="line">        redisManager.setExpire(<span class="number">1800</span>);</span><br><span class="line">        redisManager.setTimeout(timeout);</span><br><span class="line">        <span class="comment">// redisManager.setPassword(password);</span></span><br><span class="line">        <span class="keyword">return</span> redisManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cacheManager 缓存 redis实现</span></span><br><span class="line"><span class="comment">     * 使用的是shiro-redis开源插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</span><br><span class="line">        redisCacheManager.setRedisManager(redisManager());</span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RedisSessionDAO shiro sessionDao层的实现 通过redis</span></span><br><span class="line"><span class="comment">     * 使用的是shiro-redis开源插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisSessionDAO <span class="title">redisSessionDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisSessionDAO redisSessionDAO = <span class="keyword">new</span> RedisSessionDAO();</span><br><span class="line">        redisSessionDAO.setRedisManager(redisManager());</span><br><span class="line">        <span class="keyword">return</span> redisSessionDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line"><span class="comment">//        sessionManager.setSessionDAO(redisSessionDAO());</span></span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-generator</title>
      <link href="/mybatis-generator.html"/>
      <url>/mybatis-generator.html</url>
      
        <content type="html"><![CDATA[<p>** mybatis-generator：** &lt;Excerpt in index | 首页摘要&gt;<br>mybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p>本插件fork自<a href="http://link" target="_blank" rel="noopener">mybatis-generator-gui</a>,在此基础上加了批量生成表。</p><h2 id="插件特性"><a href="#插件特性" class="headerlink" title="插件特性"></a>插件特性</h2><ol><li>保存数据库配置</li><li>根据表生成pojo，mapper以及mybatis配置文件</li><li>批量生成</li><li>其它功能（待开发）</li></ol><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。</p><h3 id="启动本软件"><a href="#启动本软件" class="headerlink" title="启动本软件"></a>启动本软件</h3><ul><li>方法一: 自助构建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/maochunguang/mybatis-generator-gui</span><br><span class="line"><span class="built_in">cd</span> mybatis-generator-gui</span><br><span class="line">mvn jfx:jar</span><br><span class="line"><span class="built_in">cd</span> target/jfx/app/</span><br><span class="line">java -jar mybatis-generator-gui.jar</span><br></pre></td></tr></table></figure><ul><li>方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到<code>com.zzg.mybatis.generator.MainUI</code>类并运行就可以了</li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>更多详细文档请参考本库的Wiki</p><ul><li><a href="https://github.com/maochunguang/mybatis-generator-gui/wiki" target="_blank" rel="noopener">Usage</a></li></ul><h2 id="截图参考"><a href="#截图参考" class="headerlink" title="截图参考"></a>截图参考</h2><p><img src="http://o7kalf5h3.bkt.clouddn.com/mybatis.png" alt="MainUI"></p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第11天-红黑树</title>
      <link href="/suanfa-11.html"/>
      <url>/suanfa-11.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第11天-红黑树：** &lt;Excerpt in index | 首页摘要&gt;<br>红黑树</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>本文的主要内容：</p><ol><li>红黑树的基本概念以及最重要的 5 点规则。</li><li>红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；</li><li>红黑树的增加结点、删除结点过程解析；</li></ol><h2 id="红黑树的基本概念与数据结构表示"><a href="#红黑树的基本概念与数据结构表示" class="headerlink" title="红黑树的基本概念与数据结构表示"></a>红黑树的基本概念与数据结构表示</h2><p>首先红黑树来个定义：</p><blockquote><p>红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。</p></blockquote><p>我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。</p><p>按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。</p><blockquote><p>平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：</p></blockquote><p><img src="http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="红黑树"></p><p>红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：</p><ol><li>每个结点都只能是红色或者黑色中的一种。</li><li>根结点是黑色的。</li><li>每个叶结点（NIL 节点，空节点）是黑色的。</li><li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li><li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li></ol><p>这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：<br><img src="http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> Node root;<span class="comment">//二叉查找树的根节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点数据结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key key;<span class="comment">//键</span></span><br><span class="line">    <span class="keyword">private</span> Value value;<span class="comment">//值</span></span><br><span class="line">    <span class="keyword">private</span> Node left, right;<span class="comment">//指向子树的链接:左子树和右子树.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">//以该节点为根的子树中的结点总数</span></span><br><span class="line">    <span class="keyword">boolean</span> color;<span class="comment">//由其父结点指向它的链接的颜色也就是结点颜色.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value value, <span class="keyword">int</span> N, <span class="keyword">boolean</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.N = N;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取整个二叉查找树的大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某一个结点为根结点的二叉查找树的大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x.N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.color == RED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="红黑树的三个基本操作"><a href="#红黑树的三个基本操作" class="headerlink" title="红黑树的三个基本操作"></a>红黑树的三个基本操作</h2><p>红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。</p><p>通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。</p><p>左旋的示意图如下：<br><img src="http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p><img src="http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>左旋的 Java 实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左旋转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateLeft</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    Node x = h.right;</span><br><span class="line">    <span class="comment">//把x的左结点赋值给h的右结点</span></span><br><span class="line">    h.right = x.left;</span><br><span class="line">    <span class="comment">//把h赋值给x的左结点</span></span><br><span class="line">    x.left = h;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    x.color = h.color;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    x.N = h.N;</span><br><span class="line">    h.N = <span class="number">1</span>+ size(h.left) + size(h.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左旋的动画效果如下：<br><img src="http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>右旋其实就是左旋的逆操作：<br><img src="http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br><img src="http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>右旋的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右旋转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateRight</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    Node x = h.left;</span><br><span class="line">    h.left = x.right;</span><br><span class="line">    x.right = h;</span><br><span class="line"></span><br><span class="line">    x.color = h.color;</span><br><span class="line">    h.color = RED;</span><br><span class="line">    x.N = h.N;</span><br><span class="line">    h.N = <span class="number">1</span>+ size(h.left) + size(h.right);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右旋的动态示意图：<br><img src="http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h2 id="颜色反转"><a href="#颜色反转" class="headerlink" title="颜色反转"></a><a></a>颜色反转</h2><p>当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：<br><img src="http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：<br><img src="http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 颜色转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    h.color = RED;<span class="comment">//父结点颜色变红</span></span><br><span class="line">    h.left.color = BLACK;<span class="comment">//子结点颜色变黑</span></span><br><span class="line">    h.right.color = BLACK;<span class="comment">//子结点颜色变黑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。</p></blockquote><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第10天-二叉树</title>
      <link href="/suanfa-10.html"/>
      <url>/suanfa-10.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第10天-二叉树：** &lt;Excerpt in index | 首页摘要&gt;<br>用java实现算法求出二叉树的高度</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul><li>先序遍历：先访问根结点，然后左节点，最后右节点</li><li>中序遍历：先访问左结点，然后根节点，最后右节点</li><li>后续遍历：先访问左结点，然后右节点，最后根节点</li></ul><h2 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode left1 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode left2 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode right1 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//创建一棵树</span></span><br><span class="line">        root.left = left1;</span><br><span class="line">        left1.right = left2;</span><br><span class="line">        root.right = right1;</span><br><span class="line">        scanNodes(root);</span><br><span class="line">        System.out.println(<span class="string">"树的深度是："</span> + getDepth(root));</span><br><span class="line">        System.out.println(<span class="string">"非递归深度："</span> + findDeep2(root));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归返回二叉树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = getDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = getDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(root.val); //先序遍历</span></span><br><span class="line">        scanNodes(root.left);</span><br><span class="line"><span class="comment">//        System.out.println(root.val); //中序遍历</span></span><br><span class="line">        scanNodes(root.right);</span><br><span class="line">        System.out.println(root.val); <span class="comment">// 后序遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非递归求深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findDeep2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        TreeNode current = <span class="keyword">null</span>;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">int</span> cur, next;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数</span></span><br><span class="line">            next = queue.size();</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; next) &#123;</span><br><span class="line">                current = queue.poll();</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="comment">//把当前节点的左右节点入队（如果存在的话）  </span></span><br><span class="line">                <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(current.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (current.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(current.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的变种"><a href="#树的变种" class="headerlink" title="树的变种"></a>树的变种</h2><p>二叉查找树，平衡二叉查找树，红黑树，b树<br>红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。<br>由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第九天-排序算法比较</title>
      <link href="/suanfa-9.html"/>
      <url>/suanfa-9.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第九天-排序算法比较：** &lt;Excerpt in index | 首页摘要&gt;<br>排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="排序算法性能比较·"><a href="#排序算法性能比较·" class="headerlink" title="排序算法性能比较·"></a>排序算法性能比较·</h2><p>借一张网路上的比较图。特别直观。<br><img src="http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg" alt="算法比较"></p><h2 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h2><p>个人看法：</p><ul><li>一般的情况还是以快速排序为主，</li><li>对于多个有序的数组合并的情况使用归并排序</li><li>性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序</li></ul><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第八天-桶排序</title>
      <link href="/suanfa-8.html"/>
      <url>/suanfa-8.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第八天-桶排序：** &lt;Excerpt in index | 首页摘要&gt;<br>桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="桶排序的基本原理"><a href="#桶排序的基本原理" class="headerlink" title="桶排序的基本原理"></a>桶排序的基本原理</h2><p>将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序</p><h2 id="桶排序的java实现"><a href="#桶排序的java实现" class="headerlink" title="桶排序的java实现"></a>桶排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//分桶，这里采用映射函数f(x)=x/10。</span></span><br><span class="line">        <span class="keyword">int</span> bucketCount =<span class="number">10</span>;</span><br><span class="line">        Integer[][] bucket = <span class="keyword">new</span> Integer[bucketCount][arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> quotient = arr[i]/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (bucket[quotient][j]==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    bucket[quotient][j]=arr[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小桶排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bucket.length; i++)&#123;</span><br><span class="line">            <span class="comment">//insertion sort</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;bucket[i].length; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bucket[i][j]==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> value = bucket[i][j];</span><br><span class="line">                <span class="keyword">int</span> position=j;</span><br><span class="line">                <span class="keyword">while</span> (position&gt;<span class="number">0</span> &amp;&amp; bucket[i][position-<span class="number">1</span>]&gt;value)&#123;</span><br><span class="line">                    bucket[i][position] = bucket[i][position-<span class="number">1</span>];</span><br><span class="line">                    position--;</span><br><span class="line">                &#125;</span><br><span class="line">                bucket[i][position] = value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, index=<span class="number">0</span>; i&lt;bucket.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bucket[i].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (bucket[i][j]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    arr[index] = bucket[i][j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。<br>但桶排序的缺点是：</p><ol><li>首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</li><li>其次待排序的元素都要在一定的范围内，限制较多。</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第七天-堆排序</title>
      <link href="/suanfa-7.html"/>
      <url>/suanfa-7.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第七天-堆排序：** &lt;Excerpt in index | 首页摘要&gt;<br>堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="堆排序的基本原理"><a href="#堆排序的基本原理" class="headerlink" title="堆排序的基本原理"></a>堆排序的基本原理</h2><p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。<br>因此，实现堆排序需解决两个问题：</p><ol><li>如何将n 个待排序的数建成堆；</li><li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li></ol><h2 id="堆排序java实现"><a href="#堆排序java实现" class="headerlink" title="堆排序java实现"></a>堆排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = n / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">            sink(a, k, n);</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            swap(a, <span class="number">1</span>, n--);</span><br><span class="line">            sink(a, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; a[j - <span class="number">1</span>] &lt; a[j + <span class="number">1</span> - <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (a[k - <span class="number">1</span>] &gt;= a[j - <span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">        swap(a, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = a[i - <span class="number">1</span>];</span><br><span class="line">    a[i - <span class="number">1</span>] = a[j - <span class="number">1</span>];</span><br><span class="line">    a[j - <span class="number">1</span>] = swap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    sort(arr);</span><br><span class="line">    System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>堆排序的平均时间复杂度为Ο(nlogn)</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第六天-冒泡排序</title>
      <link href="/suanfa-6.html"/>
      <url>/suanfa-6.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第六天-冒泡排序：** &lt;Excerpt in index | 首页摘要&gt;<br>冒泡排序也非常简单，效率比较低。了解即可。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="冒泡排序的原理"><a href="#冒泡排序的原理" class="headerlink" title="冒泡排序的原理"></a>冒泡排序的原理</h2><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p><p><img src="http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg" alt="冒泡排序图"></p><h2 id="冒泡排序的java实现"><a href="#冒泡排序的java实现" class="headerlink" title="冒泡排序的java实现"></a>冒泡排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>冒泡排序的复杂度为O(n^2)</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第五天-选择排序</title>
      <link href="/suanfa-5.html"/>
      <url>/suanfa-5.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第五天-选择排序：** &lt;Excerpt in index | 首页摘要&gt;<br>选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="选择排序的原理"><a href="#选择排序的原理" class="headerlink" title="选择排序的原理"></a>选择排序的原理</h2><p>首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。<br><img src="http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg" alt="选择排序图"></p><h2 id="选择排序的java实现"><a href="#选择排序的java实现" class="headerlink" title="选择排序的java实现"></a>选择排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; (a[j] &lt; a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">            swap(a, j, j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>选择排序的算法复杂度是O(n^2)</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ol><li>每次选择的时候把最大值和最小值都比较出来，双向进行交换排序</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第一天-归并排序</title>
      <link href="/suanfa-4.html"/>
      <url>/suanfa-4.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第一天-归并排序：** &lt;Excerpt in index | 首页摘要&gt;<br>归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="归并排序的原理"><a href="#归并排序的原理" class="headerlink" title="归并排序的原理"></a>归并排序的原理</h2><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序分为两种种，第一种是自底向上的归并。</p><p>第二种是自顶向下的归并。</p><h2 id="自底向上的归并排序java实现"><a href="#自底向上的归并排序java实现" class="headerlink" title="自底向上的归并排序java实现"></a>自底向上的归并排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortBU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 复制到aux[]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并回 a[]</span></span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len *= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; n - len; lo += len + len) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = lo + len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> hi = Math.min(lo + len + len - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">                merge(a, aux, lo, mid, hi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        mergeSort(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自顶向下的归并排序java实现"><a href="#自顶向下的归并排序java实现" class="headerlink" title="自顶向下的归并排序java实现"></a>自顶向下的归并排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        sort(a, low, mid);</span><br><span class="line">        sort(a, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(a, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 复制到aux[]</span></span><br><span class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并回 a[]</span></span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>归并排序的算法复杂度是nlgn</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>几个基本有序的数组进行排序</li><li>部分有序的数组</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第三天-希尔排序</title>
      <link href="/suanfa-3.html"/>
      <url>/suanfa-3.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第三天-希尔排序：** &lt;Excerpt in index | 首页摘要&gt;<br>希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="希尔排序的基本原理"><a href="#希尔排序的基本原理" class="headerlink" title="希尔排序的基本原理"></a>希尔排序的基本原理</h2><p>基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>操作方法：</p><ol><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li><li>按增量序列个数k，对序列进行k 趟排序； </li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p><img src="http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg" alt="希尔排序原理图"></p><h2 id="希尔排序java实现"><a href="#希尔排序java实现" class="headerlink" title="希尔排序java实现"></a>希尔排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// h-sort the array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; (a[j]&lt; a[j-h]); j -= h) &#123;</span><br><span class="line">                swap(a, j, j-h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第二天-插入排序</title>
      <link href="/suanfa-2.html"/>
      <url>/suanfa-2.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第二天-插入排序：** &lt;Excerpt in index | 首页摘要&gt;<br>今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="插入排序的原理"><a href="#插入排序的原理" class="headerlink" title="插入排序的原理"></a>插入排序的原理</h2><p> 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录<br> 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br> 要点：设立哨兵，作为临时存储和判断数组边界之用</p><p><img src="http://o7kalf5h3.bkt.clouddn.com/insert.jpg" alt="插入排序原理"></p><h2 id="插入排序java实现"><a href="#插入排序java实现" class="headerlink" title="插入排序java实现"></a>插入排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; (a[j]&lt;a[j-<span class="number">1</span>]); j--) &#123;</span><br><span class="line">               swap(a, j, j-<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> swap = a[i];</span><br><span class="line">       a[i] = a[j];</span><br><span class="line">       a[j] = swap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>插入排序的复杂度为O（n^2）</p><h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><p>希尔排序，其他的插入排序有二分插入排序，2-路插入排序。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>插入排序比较适合部分有序的数组（以下四种数组）</p><ul><li>数组中每个元素距离它的最终位置都不远</li><li>一个有序的大数组接一个小数组</li><li>数组中只有几个位置不正确</li><li>数组比较小</li></ul><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突破算法第一天-快速排序</title>
      <link href="/suanfa-1.html"/>
      <url>/suanfa-1.html</url>
      
        <content type="html"><![CDATA[<p>** 突破算法第一天-快速排序：** &lt;Excerpt in index | 首页摘要&gt;<br>30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="30天突破算法"><a href="#30天突破算法" class="headerlink" title="30天突破算法"></a>30天突破算法</h2><p>算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。</p><h2 id="快速排序的原理"><a href="#快速排序的原理" class="headerlink" title="快速排序的原理"></a>快速排序的原理</h2><p>快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：</p><ul><li>1.找基准值，设Pivot = a[0] </li><li>2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。</li><li>3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。</li></ul><p><img src="http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg" alt="快速排序原理图"></p><h2 id="快速排序java实现（递归版）"><a href="#快速排序java实现（递归版）" class="headerlink" title="快速排序java实现（递归版）"></a>快速排序java实现（递归版）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序之前："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//快速排序</span></span><br><span class="line">        quick(a);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123; <span class="comment">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></span><br><span class="line">            <span class="keyword">int</span> middle = getMiddle(a,low,high);</span><br><span class="line">            quickSort(a, <span class="number">0</span>, middle-<span class="number">1</span>);</span><br><span class="line">            quickSort(a, middle+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a[low];<span class="comment">//基准元素</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="comment">//找到比基准元素小的元素位置</span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[low] = a[high]; </span><br><span class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            a[high] = a[low];</span><br><span class="line">        &#125;</span><br><span class="line">        a[low] = temp;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序三向切分法（改进的实现）"><a href="#快速排序三向切分法（改进的实现）" class="headerlink" title="快速排序三向切分法（改进的实现）"></a>快速排序三向切分法（改进的实现）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick3Sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = low, gt = high;</span><br><span class="line">    <span class="keyword">int</span> temp = a[low];</span><br><span class="line">    <span class="keyword">int</span> i = low;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; temp) swap(a, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; temp) swap(a, i, gt--);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    quick3Sort(a, low, lt - <span class="number">1</span>);</span><br><span class="line">    quick3Sort(a, gt + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> swap = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序的复杂度"><a href="#快速排序的复杂度" class="headerlink" title="快速排序的复杂度"></a>快速排序的复杂度</h2><p>时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。</p><h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><ol><li>当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。</li><li>通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>普通的无序集合排序，使用快速排序。 </li><li>包含很多重复元素的集合排序，使用三向切分的快速排序。</li><li>基本有序的集合使用归并排序。</li></ul><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计划-30天突破算法</title>
      <link href="/study-plan.html"/>
      <url>/study-plan.html</url>
      
        <content type="html"><![CDATA[<p>** 学习计划-30天突破算法：** &lt;Excerpt in index | 首页摘要&gt;<br>作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="学习排序算法的意义"><a href="#学习排序算法的意义" class="headerlink" title="学习排序算法的意义"></a>学习排序算法的意义</h2><ol><li>学会比较算法的性能的方法</li><li>相关的排序能解决类似的问题</li><li>排序算法很多时候是解决问题的第一步</li></ol><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ol><li>快速排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li><li>选择排序</li><li>冒泡排序</li><li>堆排序</li><li>桶排序</li><li>排序算法比较</li></ol><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ol><li>二叉树高度和二叉树的遍历</li><li>红黑树</li><li>b树</li></ol><h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><ol><li>二分查找</li><li>二叉查找树</li><li>平衡查找树</li><li>散列表</li></ol><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>递归（普通递归，尾递归）</li><li>动态规划</li><li>贪婪算法</li><li>分治法</li></ol><h3 id="图的算法"><a href="#图的算法" class="headerlink" title="图的算法"></a>图的算法</h3><ol><li>深度优先</li><li>广度优先</li><li>最小生成树</li><li>最短路径 </li></ol><h3 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h3><ol><li>字符串查找</li><li>单词查找树</li><li>子字符串查找</li></ol><h3 id="典型算法分析"><a href="#典型算法分析" class="headerlink" title="典型算法分析"></a>典型算法分析</h3><ol><li>拓扑排序</li><li>关键路径排序</li><li>遗传算法</li><li>RSA算法</li></ol><h2 id="英语技术文档阅读突破"><a href="#英语技术文档阅读突破" class="headerlink" title="英语技术文档阅读突破"></a>英语技术文档阅读突破</h2><ol><li>熟悉常用技术词汇</li><li>阅读常见的技术文档（官网文档看一遍）</li><li>记住常用的词汇</li><li>阅读英文技术书籍</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用java将GBK工程转为uft8</title>
      <link href="/trandsferProject.html"/>
      <url>/trandsferProject.html</url>
      
        <content type="html"><![CDATA[<p>** 用java将GBK工程转为uft8：** &lt;Excerpt in index | 首页摘要&gt;<br>windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="为什么要转码？"><a href="#为什么要转码？" class="headerlink" title="为什么要转码？"></a>为什么要转码？</h2><p>有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。</p><h2 id="本程序试用范围"><a href="#本程序试用范围" class="headerlink" title="本程序试用范围"></a>本程序试用范围</h2><p>gbk的代码，或者gb2312的工程均可以转换</p><h2 id="编码转换的思路"><a href="#编码转换的思路" class="headerlink" title="编码转换的思路"></a>编码转换的思路</h2><p>本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。</p><ol><li>制定gbk编码把文件流读进来，加载到内存，转为String类型的内容</li><li>将String内容转为utf8的String</li><li>将String内容写入文件</li></ol><h2 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferFile</span><span class="params">(String pathName, <span class="keyword">int</span> depth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File dirFile = <span class="keyword">new</span> File(pathName);</span><br><span class="line">        <span class="keyword">if</span> (!isValidFile(dirFile)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//获取此目录下的所有文件名与目录名</span></span><br><span class="line">        String[] fileList = dirFile.list();</span><br><span class="line">        <span class="keyword">int</span> currentDepth = depth + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileList.length; i++) &#123;</span><br><span class="line">            String string = fileList[i];</span><br><span class="line">            File file = <span class="keyword">new</span> File(dirFile.getPath(), string);</span><br><span class="line">            String name = file.getName();</span><br><span class="line">            <span class="comment">//如果是一个目录，搜索深度depth++，输出目录名后，进行递归</span></span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                transferFile(file.getCanonicalPath(), currentDepth);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (name.contains(<span class="string">".java"</span>) || name.contains(<span class="string">".properties"</span>) || name.contains(<span class="string">".xml"</span>)) &#123;</span><br><span class="line">                    readAndWrite(file);</span><br><span class="line">                    System.out.println(name + <span class="string">" has converted to utf8 "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidFile</span><span class="params">(File dirFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dirFile.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"file exist"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dirFile.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dirFile.isFile()) &#123;</span><br><span class="line">                System.out.println(dirFile.getCanonicalFile());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWrite</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String  content = FileUtils.readFileByEncode(file.getPath(), <span class="string">"GBK"</span>);</span><br><span class="line">        FileUtils.writeByBufferedReader(file.getPath(), <span class="keyword">new</span> String(content.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"UTF-8"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//程序入口，制定src的path</span></span><br><span class="line">        String path = <span class="string">"/Users/mac/Downloads/unit06_jdbc/src"</span>;</span><br><span class="line">        transferFile(path, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeByBufferedReader</span><span class="params">(String path, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(path);</span><br><span class="line">            file.delete();</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">false</span>);</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">            bw.write(content);</span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileByEncode</span><span class="params">(String path, String chatSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        InputStreamReader in = <span class="keyword">new</span> InputStreamReader(input, chatSet);</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(in);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String line = reader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line);</span><br><span class="line">            sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">            line = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿拉伯数字转汉字写法</title>
      <link href="/num2Chinese.html"/>
      <url>/num2Chinese.html</url>
      
        <content type="html"><![CDATA[<p>** 阿拉伯数字转汉字写法：** &lt;Excerpt in index | 首页摘要&gt;<br>找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。<br>而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。</p><h2 id="中文数字的零"><a href="#中文数字的零" class="headerlink" title="中文数字的零"></a>中文数字的零</h2><p>中文的零的使用总结起来有三个规则，</p><ul><li>以10000为小节，结尾是0，不使用零，比如1020</li><li>以10000为小节，小节内两个非0数字之间需要零</li><li>小节的千位是0，若小节前无其他数字，不用零，否者用零</li></ul><h2 id="完整代码（参考算法的乐趣第四章）"><a href="#完整代码（参考算法的乐趣第四章）" class="headerlink" title="完整代码（参考算法的乐趣第四章）"></a>完整代码（参考算法的乐趣第四章）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberTransfer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnNumChar = <span class="keyword">new</span> String[]&#123;<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitSection = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>, <span class="string">"万亿"</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitChar = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"十"</span>, <span class="string">"百"</span>, <span class="string">"千"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumberToChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">304</span>, <span class="number">4006</span>, <span class="number">4000</span>, <span class="number">10003</span>, <span class="number">10030</span>, <span class="number">21010011</span>, <span class="number">101101101</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.println(numberToChinese(nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToChinese</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String strIns;</span><br><span class="line">        String chnStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> needZero = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"零"</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            strIns = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> section = num % <span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">if</span> (needZero) &#123;</span><br><span class="line">                chnStr = chnNumChar[<span class="number">0</span>] + chnStr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 添加节权（万，亿）</span></span><br><span class="line">            strIns += (section != <span class="number">0</span>) ? chnUnitSection[unitPos] : chnUnitSection[<span class="number">0</span>];</span><br><span class="line">            chnStr = strIns + chnStr;</span><br><span class="line">            <span class="comment">// 以万为单位，求万以内的权位</span></span><br><span class="line">            chnStr = sectionToChinese(section, chnStr);</span><br><span class="line">            needZero = (section &lt; <span class="number">1000</span>) &amp;&amp; (section &gt; <span class="number">0</span>);</span><br><span class="line">            num = num / <span class="number">10000</span>;</span><br><span class="line">            unitPos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chnStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sectionToChinese</span><span class="params">(<span class="keyword">int</span> section, String chnStr)</span> </span>&#123;</span><br><span class="line">        String strIns;</span><br><span class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> zero = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (section &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = section % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (section == <span class="number">0</span> || !zero) &#123;</span><br><span class="line">                    zero = <span class="keyword">true</span>;<span class="comment">// zero确保不会出现多个零</span></span><br><span class="line">                    chnStr = chnNumChar[v] + chnStr;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                zero = <span class="keyword">false</span>;</span><br><span class="line">                strIns = chnNumChar[v]; <span class="comment">// 此位置对应等中文数字</span></span><br><span class="line">                strIns += chnUnitChar[unitPos];<span class="comment">// 此位置对应的权位</span></span><br><span class="line">                chnStr = strIns + chnStr;</span><br><span class="line">            &#125;</span><br><span class="line">            unitPos++;</span><br><span class="line">            section = section / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chnStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试大全自制版</title>
      <link href="/java-interview.html"/>
      <url>/java-interview.html</url>
      
        <content type="html"><![CDATA[<p>** java面试大全自制版：** &lt;Excerpt in index | 首页摘要&gt;<br>java语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="本书的目的"><a href="#本书的目的" class="headerlink" title="本书的目的"></a>本书的目的</h2><p>每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://maochunguang.gitbooks.io/java-interview/" target="_blank" rel="noopener">gitbook地址</a><br><img src="http://o7kalf5h3.bkt.clouddn.com/java-tips.png" alt="目录截图"></p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kobo aura one导出笔记高级配置</title>
      <link href="/kobo-config.html"/>
      <url>/kobo-config.html</url>
      
        <content type="html"><![CDATA[<p>** kobo aura one导出笔记高级配置：** &lt;Excerpt in index | 首页摘要&gt;<br>kobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的<br>原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。</p><h2 id="kobo原生系统的功能（推荐原生系统，打上补丁）"><a href="#kobo原生系统的功能（推荐原生系统，打上补丁）" class="headerlink" title="kobo原生系统的功能（推荐原生系统，打上补丁）"></a>kobo原生系统的功能（推荐原生系统，打上补丁）</h2><ol><li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li><li>高亮，笔记，导出笔记（需要配置一下）</li><li>字典（英文，中文，法文等多国字典，可以自己修改）</li><li>阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）</li><li>自动亮度（最大的优点）</li></ol><h2 id="koreader的功能"><a href="#koreader的功能" class="headerlink" title="koreader的功能"></a>koreader的功能</h2><ol><li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li><li>扫描版pdf支持重拍，切边（最大特色）</li><li>笔记导出到印象笔记</li><li>字典（强大的字典扩展）</li></ol><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p><strong>说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo</strong></p><ol><li>wifi激活,</li><li>kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。</li></ol><h2 id="更新固件，打补丁"><a href="#更新固件，打补丁" class="headerlink" title="更新固件，打补丁"></a>更新固件，打补丁</h2><p>kobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可</p><h2 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h2><p>下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了</p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><ol><li>刷新页数（打补丁）</li><li>上下页宽（打补丁）</li><li>全屏模式（修改配置文件）</li><li>字体高级设置（修改配置文件）</li><li>导出笔记和高亮（修改配置文件）</li></ol><h2 id="kobo高级配置文件详解"><a href="#kobo高级配置文件详解" class="headerlink" title="kobo高级配置文件详解"></a>kobo高级配置文件详解</h2><p>用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[FeatureSettings]</span><br><span class="line">#导出笔记</span><br><span class="line">ExportHighlightsEnabled=true</span><br><span class="line">#显示全书的页码，而不是章节的页码</span><br><span class="line">FullBookPageNumbers=true</span><br><span class="line">#用在线等维基百科代替词典查询</span><br><span class="line">OnlineWikipedia=true</span><br><span class="line">#全屏阅读</span><br><span class="line">FullScreenReading=true</span><br><span class="line">#图片缩放</span><br><span class="line">ImageZoom=true</span><br><span class="line">#浏览器全屏</span><br><span class="line">FullScreenBrowser=true</span><br><span class="line">#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能</span><br><span class="line">Screenshots=true</span><br><span class="line">[Reading]</span><br><span class="line">#翻页刷新的页数，20页全刷一次</span><br><span class="line">numPartialUpdatePageTurns=20</span><br><span class="line">#左边距</span><br><span class="line">readingLeftMargin=0</span><br><span class="line">#右边距</span><br><span class="line">readingRightMargin=0</span><br><span class="line">#行高</span><br><span class="line">readingLineHeight=1.4</span><br><span class="line"></span><br><span class="line">[PowerOptions]</span><br><span class="line">#自动关机时间</span><br><span class="line">AutoOffMinutes=60</span><br></pre></td></tr></table></figure><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Illegal mix of collations</title>
      <link href="/mysql-collation.html"/>
      <url>/mysql-collation.html</url>
      
        <content type="html"><![CDATA[<p>** mysql排序字符集问题：** &lt;Excerpt in index | 首页摘要&gt;<br>mysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用mysql进行两个表的联合查询的时候，出现下面的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illegal mix of collations (utf8_unicode_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT) for operation &apos;=&apos;</span><br></pre></td></tr></table></figure><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li>通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。</li><li>把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：</li><li>这两个表中openid的排序规则不一致，导致出现问题。<br><img src="http://o7kalf5h3.bkt.clouddn.com/openid01.png" alt="user表中opeid"><br><img src="http://o7kalf5h3.bkt.clouddn.com/openid02.png" alt="user_tag表中opeid"></li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将user表中的字符集和排序规则设置为默认，保持一致即可。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何选购合适的电脑</title>
      <link href="/buy-computer.html"/>
      <url>/buy-computer.html</url>
      
        <content type="html"><![CDATA[<p>** 购买合适的电脑：** &lt;Excerpt in index | 首页摘要&gt;<br>现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="买电脑主要干什么"><a href="#买电脑主要干什么" class="headerlink" title="买电脑主要干什么"></a>买电脑主要干什么</h2><ol><li>看电影，上网</li><li>打游戏</li><li>办公（移动办公）</li><li>平面设计（二维）</li><li>编程（ios和其它，深度学习）</li><li>效果图渲染（3维制图）</li></ol><h2 id="电脑配置说明"><a href="#电脑配置说明" class="headerlink" title="电脑配置说明"></a>电脑配置说明</h2><p>目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。</p><h2 id="看电影，上网"><a href="#看电影，上网" class="headerlink" title="看电影，上网"></a>看电影，上网</h2><p>看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以<br>推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右<br>推荐配置1：i5处理器，4g内存，256固态</p><h2 id="打游戏"><a href="#打游戏" class="headerlink" title="打游戏"></a>打游戏</h2><p>游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机</p><ul><li>一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起</li><li>大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起</li><li>发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起</li></ul><h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h2><p>很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可</p><h2 id="平面设计"><a href="#平面设计" class="headerlink" title="平面设计"></a>平面设计</h2><p>使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可<br>推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可<br>推荐配置2：macbookpro15 16g，512ssd，i7处理器</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。<br>推荐配置1：macbookpro15 16g，512ssd，i7处理器<br>推荐配置2：i7处理器，16g内存，512ssd，中端显卡</p><h2 id="效果图渲染（3维制图）"><a href="#效果图渲染（3维制图）" class="headerlink" title="效果图渲染（3维制图）"></a>效果图渲染（3维制图）</h2><p>这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。<br>推荐配置1：至强处理器，32g内存，512ssd+1Thdd<br>推荐配置2：i7处理器，32g内存，512ssd+1Thdd</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> digital </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb从入门到精通</title>
      <link href="/mongodb-study.html"/>
      <url>/mongodb-study.html</url>
      
        <content type="html"><![CDATA[<p>** mongodb从入门到精通** &lt;Excerpt in index | 首页摘要&gt;<br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br> <a id="more"></a><br>&lt;The rest of contents | 余下全文&gt;</p><h2 id="mongodb学习"><a href="#mongodb学习" class="headerlink" title="mongodb学习"></a>mongodb学习</h2><h2 id="1-mongodb特性"><a href="#1-mongodb特性" class="headerlink" title="1.mongodb特性"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。2）所有实体都是在首次使用时创建。3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。4）也没有固定的数据模型5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。6）mongo本身支持集群和数据分片7）mongo是c++实现的，支持windows mac linux等主流操作系统8）性能优越，速度快</code></pre><h2 id="2-mongo常用操作"><a href="#2-mongo常用操作" class="headerlink" title="2.mongo常用操作"></a>2.mongo常用操作</h2><h3 id="增删操作"><a href="#增删操作" class="headerlink" title="增删操作"></a>增删操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.user.insert(&#123;<span class="attr">name</span>:<span class="string">'aaaa'</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;);</span><br><span class="line">db.user.save(&#123;<span class="attr">name</span>:<span class="string">'aaaa'</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;);</span><br><span class="line">db.collection.insertOne(&#123;&#125;);<span class="comment">//(3.2新特性)</span></span><br><span class="line">db.collection.deleteOne(&#123;&#125;,&#123;&#125;);<span class="comment">//(3.2新特性)</span></span><br><span class="line">db.collection.remove(&#123;<span class="attr">name</span>:<span class="string">'aaa'</span>&#125;);</span><br><span class="line">db.collection.remove();<span class="comment">//(删除全部)</span></span><br></pre></td></tr></table></figure><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe );</span><br><span class="line"><span class="comment">//upsert模式</span></span><br><span class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe,  <span class="literal">true</span> );</span><br><span class="line"><span class="comment">//MULTI模式</span></span><br><span class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe,  <span class="literal">true</span> ，<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p></blockquote><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>普通查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find();</span><br><span class="line">db.user.find(&#123;<span class="attr">name</span>:<span class="string">'aaa'</span>&#125;);</span><br><span class="line">db.user.findOne(&#123;<span class="attr">name</span>:<span class="string">'aaa'</span>&#125;);</span><br></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.UserInfo.find(&#123;<span class="attr">userName</span> :<span class="string">'/A/'</span>&#125;) <span class="comment">//（名称%A%）</span></span><br><span class="line">db.UserInfo.find(&#123;<span class="attr">userName</span> :<span class="string">'/^A/'</span>&#125;) <span class="comment">//(名称A%)</span></span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ol><li>$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     </li><li>$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );</li><li>$exists  可选：true，false  db.things.find( { a : { $exists : true } } );</li><li>$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );</li><li>$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );</li><li>$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});</li><li>$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});</li><li>$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : “bob”, $nor : [ { a : 1 },{ b : 2 }]})</li><li>$or Or子句，注意$or不能嵌套使用  db.things.find( { name : “bob” , $or : [ { a : 1 },{ b : 2 }]})</li><li>$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );</li><li>$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );</li></ol><h3 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h3><p>$size 用来匹配数组长度（即最大下标）<br>// 返回comments包含5个元素的文档<br>db.posts.find({}, {comments:{‘$size’: 5}});<br>// 使用冗余字段来实现<br>db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});<br>$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项<br>// 仅返回数组中的前5项<br>db.posts.find({}, {comments:{‘$slice’: 5}});<br>// 仅返回数组中的最后5项<br>db.posts.find({}, {comments:{‘$slice’: -5}});<br>// 跳过数组中的前20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [20, 10]}});<br>// 跳过数组中的最后20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});<br>MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配<br>// 返回comments中第1项的by子键为Abe的所有文档<br>db.posts.find( { “comments.0.by” : “Abe” } );   </p><h2 id="3-索引的使用"><a href="#3-索引的使用" class="headerlink" title="3.索引的使用"></a>3.索引的使用</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.things.ensureIndex(&#123;<span class="string">'j'</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">//创建子文档 索引</span></span><br><span class="line">db.things.ensureIndex(&#123;<span class="string">'user.Name'</span> : - <span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">//创建 复合 索引</span></span><br><span class="line">db.things.ensureIndex(&#123;</span><br><span class="line"><span class="string">'j'</span> : <span class="number">1</span> ,   <span class="comment">//  升序</span></span><br><span class="line"><span class="string">'x'</span> : - <span class="number">1</span>   <span class="comment">//  降序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的<br>        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向</p><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><p>修改索引，只需要重新 运行索引 命令即可<br>如果索引已经存在则会 重建， 不存在的索引会被 添加  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.things.ensureIndex (&#123;</span><br><span class="line"><span class="comment">//原来的索引会 重建</span></span><br><span class="line"><span class="string">'user.Name '</span> : - <span class="number">1</span> ,</span><br><span class="line"><span class="comment">//新增一个升序 索引</span></span><br><span class="line"><span class="string">'user.Name '</span> : <span class="number">1</span> ,</span><br><span class="line"><span class="comment">//为 Age 新建降序 索引</span></span><br><span class="line"><span class="string">'user.Age '</span> :  - <span class="number">1</span></span><br><span class="line"><span class="comment">//打开后台执行</span></span><br><span class="line">&#125;,&#123;<span class="string">'background'</span> :   <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">//重建索引</span></span><br><span class="line">db.things.reIndex();</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除集合中的所有 索引</span></span><br><span class="line">db.things.dropIndexes ();  </span><br><span class="line"><span class="comment">//删除指定键的索引  </span></span><br><span class="line">db.things.dropIndex (&#123;</span><br><span class="line">x :   <span class="number">1</span> ,</span><br><span class="line">y :   - <span class="number">1</span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//使用 command 删除指定键的 索引</span></span><br><span class="line">db.runCommand (&#123;</span><br><span class="line">dropIndexes : <span class="string">'foo '</span> ,</span><br><span class="line">index:&#123; <span class="attr">y</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//使用 command 删除所有 索引</span></span><br><span class="line">db.runCommand (&#123;<span class="attr">dropIndexes</span> : <span class="string">'foo '</span>,<span class="attr">index</span>: <span class="string">'*'</span>&#125;)</span><br></pre></td></tr></table></figure><p>如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>创建唯一索引，同时这也是一个符合唯一索引  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.things.ensureIndex (</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'firstName '</span> :   <span class="number">1</span> ,</span><br><span class="line"><span class="string">'lastName '</span> :   <span class="number">1</span></span><br><span class="line">&#125;,   &#123;</span><br><span class="line"><span class="comment">//指定为唯一索引</span></span><br><span class="line"><span class="string">'unique'</span>: <span class="literal">true</span> ,</span><br><span class="line"><span class="comment">//删除重复 记录</span></span><br><span class="line"><span class="string">'dropDups'</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="强制使用索引"><a href="#强制使用索引" class="headerlink" title="强制使用索引"></a>强制使用索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制使用索引 a 和 b</span></span><br><span class="line">db.collection.find(&#123;</span><br><span class="line"><span class="string">'a'</span> :   <span class="number">4</span> ,</span><br><span class="line"><span class="string">'b'</span> :   <span class="number">5</span> ,</span><br><span class="line"><span class="string">'c'</span> :   <span class="number">6</span></span><br><span class="line">&#125;).hint(&#123;</span><br><span class="line"><span class="string">'a'</span> :   <span class="number">1</span> ,</span><br><span class="line"><span class="string">'b'</span> :   <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//强制不使用任何 索引</span></span><br><span class="line">db.collection.find().hint(&#123;</span><br><span class="line"><span class="string">'$natural'</span> :   <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>索引总结:</p><ul><li>索引可以加速查询；</li><li>单个索引无需在意其索引方向；</li><li>多键索引需要慎重考虑每个索引的方向；</li><li>做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；</li><li>不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；</li><li>唯一索引可以用来消除重复记录；</li><li>地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</li></ul><h2 id="4-mongo数据库管理"><a href="#4-mongo数据库管理" class="headerlink" title="4.mongo数据库管理"></a>4.mongo数据库管理</h2><h3 id="安全与认证"><a href="#安全与认证" class="headerlink" title="安全与认证"></a>安全与认证</h3><ol><li>默认为无认证，启动用登录 shell ；</li><li>添加账号；</li><li>关闭 shell .关闭 MongoDB ；</li><li>为 MongoDB 增加 — auth 参数；</li><li>重 启 MongoDB ；</li><li>登录 shell ，此时就需要认证了</li></ol><h3 id="冷备份"><a href="#冷备份" class="headerlink" title="冷备份"></a>冷备份</h3><ol><li>关闭MongoDB引擎</li><li>拷贝数据库文件夹及文件</li><li>恢复时反向操作即可        </li></ol><ul><li>优点：可以完全保证数据完整性；</li><li>缺点：需要数据库引擎离线     <h3 id="热备份"><a href="#热备份" class="headerlink" title="热备份"></a>热备份</h3></li></ul><ol><li>保持MongoDB为运行状态</li><li>使用mongodump备份数据</li><li>使用mongorestore恢复数据</li></ol><ul><li>优点：数据库引擎无须离线</li><li>缺点：不能保证数据完整性，操作时会降低MongoDB性能</li></ul><h3 id="主从复制备份"><a href="#主从复制备份" class="headerlink" title="主从复制备份"></a>主从复制备份</h3><ol><li>创建主从复制机制</li><li>配置完成后数据会自动同步</li><li>恢复途径很多</li></ol><ul><li>优点：可以保持MongoDB处于联机状态，不影响性能</li><li>缺点：在数据写入密集的情况下可能无法保证数据完整性</li></ul><h3 id="修复db-repairDatabase"><a href="#修复db-repairDatabase" class="headerlink" title="修复db.repairDatabase();"></a>修复db.repairDatabase();</h3><ul><li>修复数据库还可以起到压缩数据的作用；</li><li>修复数据库的操作相当耗时，万不得已请不要使用；</li><li>建议经常做数据备份；<h2 id="5-mongo复制-集群"><a href="#5-mongo复制-集群" class="headerlink" title="5.mongo复制(集群)"></a>5.mongo复制(集群)</h2></li></ul><ol><li>主从复制<br>选项      说明</li></ol><p>–only  作用是限定仅复制指定的某个数据库<br>–slavedelay  为复制设置操作延迟，单位为秒<br>–fastsync  以主节点的数据快照为基础启动从节点。<br>–autoresync  当主从节点数据不一致时，是否自动重新同步<br>–oplogSize  设定主节点中的oplog的容量，单位是MB</p><ol start="2"><li><p>副本集<br>与普通主从复制集群相比，具有自动检测机制<br>需要使用—replSet 选项指定副本同伴<br>任何时候，副本集当中最多只允许有1个活跃节点</p></li><li><p>读写分离<br>将密集的读取操作分流到从节点上，降低主节点的负载<br>默认情况下，从节点是不允许处理<br>客户端请求的，需要使用—slaveOkay打开<br>不适用于实时性要求非常高的应用</p></li><li><p>工作原理—— OPLOG<br>oplog保存在local数据库中，oplog就在其中的<br>oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：<br> ts：操作时间戳，占用4字节<br> op：操作类型，占用1字节<br> ns：操作对象的命名空间（或理解为集合全名）<br> o：进一步指定所执行的操作，例如插入</p></li><li><p>工作原理—— 同步<br> 从节点首次启动时，做完整同步<br> 主节点数据发生变化时，做增量同步<br> 从节点与主节点数据严重不一致时，做完整同步</p></li><li><p>复制管理—— 诊断<br>db.printReplicationInfo()<br>在主节点上使用<br> 返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据<br>在从节点上使用<br>db.printSlaveReplicationInfo()<br> 返回信息是从节点的数据源列表. 同步延迟时间等</p></li><li><p>复制管理—— 变更OPLOG 容量<br>在主节点上使用<br> 设定—oplogSize参数<br> 重启MongoDB</p></li><li><p>复制管理—— 复制认证<br>主从节点皆须配置<br> 存储在local.system.users<br> 优先尝试repl用户<br> 主从节点的用户配置必须保持一致</p><h2 id="6-MONGODB分片"><a href="#6-MONGODB分片" class="headerlink" title="6.MONGODB分片"></a>6.MONGODB分片</h2><h3 id="分片与自动分片"><a href="#分片与自动分片" class="headerlink" title="分片与自动分片"></a>分片与自动分片</h3><p>分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。<br>传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。</p></li></ol><ul><li>递增片键–连续 不均匀 写入集中 分流较差</li><li>随机片键–不连续 均匀 写入分散 分流较好</li></ul><h3 id="三个组成部分"><a href="#三个组成部分" class="headerlink" title="三个组成部分"></a>三个组成部分</h3><ul><li>片,保存子集数据的容器</li><li>mongos,MongoDB的路由器进程</li><li>配置服务器,分·片集群的配置信息<h3 id="创建分片"><a href="#创建分片" class="headerlink" title="创建分片"></a>创建分片</h3></li><li>–启动配置服务器,可以创建一个或多个</li><li>–添加片,每个片都应该是副本集</li><li>–物理服务器,性能、安全和稳定性<h3 id="管理分片"><a href="#管理分片" class="headerlink" title="管理分片"></a>管理分片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询分片</span></span><br><span class="line">db.shards.find();</span><br><span class="line"><span class="comment">//数据库</span></span><br><span class="line">db.databases.find();</span><br><span class="line"><span class="comment">//块</span></span><br><span class="line">db.chunks.find();</span><br><span class="line"><span class="comment">//分片状态</span></span><br><span class="line">db.printShardingStatus();</span><br><span class="line"><span class="comment">//删除片</span></span><br><span class="line">db.runCommand(&#123; <span class="attr">removeshard</span> : <span class="string">'ip:port'</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自用黑色主题</title>
      <link href="/hexo-theme.html"/>
      <url>/hexo-theme.html</url>
      
        <content type="html"><![CDATA[<p>** hexo和coding打造静态博客 ：** &lt;Excerpt in index | 首页摘要&gt;<br>使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。    </p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="主题图片"><a href="#主题图片" class="headerlink" title="主题图片"></a>主题图片</h2><p><img src="http://o7kalf5h3.bkt.clouddn.com/blog-index.png" alt="主题首页"> </p><h2 id="black-blue主题来源"><a href="#black-blue主题来源" class="headerlink" title="black-blue主题来源"></a>black-blue主题来源</h2><p>本主题修改自<strong>spfk</strong>主题，但之前spfk主题有很多问题，本主题改进如下：</p><ol><li>压缩js，css提高性能</li><li>代码段样式显示更完美</li><li>增加本地搜索</li><li>设置更合适的字体大小</li><li>颜色以黑色和蓝色为主，色彩鲜明</li><li>seo适当优化</li><li>删除多说，有言，增加畅言评论</li><li>删除stylus，全部改用css方便修改</li></ol><h2 id="主题地址"><a href="#主题地址" class="headerlink" title="主题地址"></a>主题地址</h2><p><a href="https://github.com/maochunguang/black-blue" target="_blank" rel="noopener">black-blue</a></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>大家使用主题的时候，把<strong>主题配置文件_config.yml</strong>以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxxxxx</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="comment"># 畅言评论</span></span><br><span class="line"><span class="attr">changyan:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">  conf:</span> <span class="string">xxxxx</span></span><br></pre></td></tr></table></figure><h2 id="black-blue主题配置"><a href="#black-blue主题配置" class="headerlink" title="black-blue主题配置"></a>black-blue主题配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>复制主题到themes目录下<code>cd themes &amp;&amp; git clone https://github.com/maochunguang/black-blue</code>，修改_config.yml <code>theme: black-blue</code></p><h3 id="安装常用插件，建议全部安装"><a href="#安装常用插件，建议全部安装" class="headerlink" title="安装常用插件，建议全部安装"></a>安装常用插件，建议全部安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## rss插件</span></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"><span class="comment">## 站点sitemap生成插件</span></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"><span class="comment">## 百度url提交</span></span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line"><span class="comment">## 本地搜索插件集成</span></span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h3 id="博客全局配置，修改根目录下-config-yml"><a href="#博客全局配置，修改根目录下-config-yml" class="headerlink" title="博客全局配置，修改根目录下_config.yml"></a>博客全局配置，修改根目录下_config.yml</h3><p>插件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-baidu-sitemap</span></span><br></pre></td></tr></table></figure><p>rss设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>本地搜索配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.json</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><p>站点地图，seo搜索引擎需要</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>菜单配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 添加单独的页面:hexo new page about，about是页面的路径，也是名称</span></span><br><span class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment"># 主页: /archives/</span></span><br><span class="line">  <span class="string">所有文章:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="string">玩转开发工具:</span> <span class="string">/categories/开发工具/</span></span><br><span class="line">  <span class="string">玩转数码:</span> <span class="string">/categories/digital</span></span><br><span class="line">  <span class="string">认知提升:</span> <span class="string">/categories/cognition</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><p>评论配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启畅言评论，</span></span><br><span class="line"><span class="attr">changyan:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">  conf:</span> <span class="string">xxxxxxxxxxxx</span></span><br><span class="line"><span class="comment"># 是否开启disqus，</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">mmmmmm</span></span><br></pre></td></tr></table></figure><h3 id="其他配置，详细的配置请下载主题，都有注释"><a href="#其他配置，详细的配置请下载主题，都有注释" class="headerlink" title="其他配置，详细的配置请下载主题，都有注释"></a>其他配置，<strong>详细的配置请下载主题，都有注释</strong></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数学公式支持</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Socail Share | 是否开启分享</span></span><br><span class="line"><span class="attr">baidushare:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 谷歌分析，百度分析，seo分析很有用</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxcxcxcsdsf</span></span><br></pre></td></tr></table></figure><h2 id="自定义配置（对前端技术有了解即可）"><a href="#自定义配置（对前端技术有了解即可）" class="headerlink" title="自定义配置（对前端技术有了解即可）"></a>自定义配置（对前端技术有了解即可）</h2><h3 id="显示更多和折叠文章"><a href="#显示更多和折叠文章" class="headerlink" title="显示更多和折叠文章"></a>显示更多和折叠文章</h3><p>你的md文件格式需要按下面的来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: 突破算法第11天-红黑树</span><br><span class="line">date: 2017-10-30 22:35:37</span><br><span class="line">tags: 算法</span><br><span class="line">categories: algorithm</span><br><span class="line">---</span><br><span class="line">** &#123;&#123; title &#125;&#125;：** &lt;Excerpt in index | 首页摘要&gt;</span><br><span class="line">红黑树</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;The rest of contents | 余下全文&gt;</span><br><span class="line">正文……</span><br></pre></td></tr></table></figure><h3 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h3><p>在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像</p><h3 id="背景图片配置"><a href="#背景图片配置" class="headerlink" title="背景图片配置"></a>背景图片配置</h3><p>在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改</p><h3 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h3><p>比如把畅言替换为有言</p><ol><li><p>先修改themes/black-blue/_config.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">changyan:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="string">xxxxxxx</span></span><br></pre></td></tr></table></figure></li><li><p>修改themes/black-blue/layout/_partial/comments/changyan.ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"changyan"</span> id=<span class="string">"comments"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"uyan_frame"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://v2.uyan.cc/code/uyan.js?uid=&lt;%= uid%&gt;"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>section&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改themes/black-blue/layout/_partial/article.ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">  uid: theme.changyan.uid</span><br><span class="line">&#125;) %&gt;</span><br></pre></td></tr></table></figure></li><li><p>重新生成页面<code>hexo g</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数码产品选购</title>
      <link href="/digital-info.html"/>
      <url>/digital-info.html</url>
      
        <content type="html"><![CDATA[<p>** 数码产品选购：** &lt;Excerpt in index | 首页摘要&gt;<br>作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="我喜欢的电子产品"><a href="#我喜欢的电子产品" class="headerlink" title="我喜欢的电子产品"></a>我喜欢的电子产品</h2><ul><li>电脑（笔记本，台式机，游戏主机，工作站）</li><li>手机（苹果，安卓，其它智能手机）</li><li>平板（安卓平板，ios平板）</li><li>电子书阅读器</li><li>电子手表</li></ul><h2 id="选购的原则"><a href="#选购的原则" class="headerlink" title="选购的原则"></a>选购的原则</h2><ol><li>产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。</li><li>产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。</li><li>产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。</li><li>产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。</li><li>功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。</li><li>买电子产品的目的，没有任何需求就是瞎买。</li></ol><h2 id="电子产品的使用"><a href="#电子产品的使用" class="headerlink" title="电子产品的使用"></a>电子产品的使用</h2><p>我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，<br>书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。<br>第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。<br>第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。<br>第三，了解自己的需求，需要什么买什么，</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> digital </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写一篇好博客？</title>
      <link href="/bestblog.html"/>
      <url>/bestblog.html</url>
      
        <content type="html"><![CDATA[<p>** 提高自己博客的质量：** &lt;Excerpt in index | 首页摘要&gt;<br>写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="好博客，好文章是什么样的？"><a href="#好博客，好文章是什么样的？" class="headerlink" title="好博客，好文章是什么样的？"></a>好博客，好文章是什么样的？</h2><ol><li>文章名称鲜明，一看名称就知道关于什么的内容</li><li>整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明</li><li>简明扼要。太啰嗦，没人看。</li><li>难易适中，太高深也没人看</li><li>图文搭配，有句话说的好，<strong>一图胜千文</strong>，好的图片胜过千言万语</li></ol><h2 id="怎么写出好博客？"><a href="#怎么写出好博客？" class="headerlink" title="怎么写出好博客？"></a>怎么写出好博客？</h2><ol><li>定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动</li><li>准备资料阶段，熟悉redis配置相关资料，做好功课</li><li>定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？</li><li>语言表单，简单直白，不用凑字数</li><li>深入主题，比如挖掘更多redis的配置，把参数简要说明</li><li>找一个好图片，如果找不到，自己制作一个最契合自己主题的图片</li><li>把文章发给好友阅读，提出宝贵的意见</li><li>改进博客</li><li>坚持写博客</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis后台启动详细配置</title>
      <link href="/redis-config.html"/>
      <url>/redis-config.html</url>
      
        <content type="html"><![CDATA[<p>** redis后台启动详细配置：** &lt;Excerpt in index | 首页摘要&gt;<br>  redis启动的时候有多种模式，后台启动，集群启动等等。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在开发中一般都是在命令行中直接运行<code>redis-server</code>,但是这样命令行关闭，服务就停止了。<br>如果要在后台运行redis服务，需要制定配置文件。这里以<strong>ubuntu14</strong>为例子</p><h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><p>查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>把daemonize设置为yes，<br>然后<code>redis-server /etc/redis/redis.conf</code>启动服务，</p><h2 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h2><p><code>ps -ef|grep redis-server</code>查看是否有redis进程存在</p><h2 id="更多配置，在conf文件有说明"><a href="#更多配置，在conf文件有说明" class="headerlink" title="更多配置，在conf文件有说明"></a>更多配置，在conf文件有说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"># 只允许本机访问</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"># 端口设置</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 0</span><br><span class="line">loglevel notice</span><br><span class="line"># 日志文件</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"># 开启数据库的数量，Redis 是有数据库概念的，默认是 16 个，数字从 0 ~ 15</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir ./</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"># 密码设置，需要设置密码打开</span><br><span class="line">requirepass 123455</span><br><span class="line">slave-priority 100</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用koa2.x写下载漫画的爬虫</title>
      <link href="/spider-koa2.html"/>
      <url>/spider-koa2.html</url>
      
        <content type="html"><![CDATA[<p>** 用koa2.x写下载漫画的爬虫：** &lt;Excerpt in index | 首页摘要&gt;<br>使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ol><li>安装nodejs&gt;7.6,安装koa-generator</li><li>直接<code>koa2 spider</code>,生成项目</li><li>安装request,request-promise,cheerio,mkdirp</li><li>npm install安装依赖</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。</p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。<br>爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。</p><h2 id="核心代码-spider-js"><a href="#核心代码-spider-js" class="headerlink" title="核心代码,spider.js"></a>核心代码,spider.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"request-promise"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</span><br><span class="line">exports.download = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dir = <span class="string">'images'</span>;</span><br><span class="line">    <span class="comment">// 图片链接地址</span></span><br><span class="line">    <span class="keyword">let</span> links = [];</span><br><span class="line">    <span class="comment">// 创建目录</span></span><br><span class="line">    mkdirp(dir);</span><br><span class="line">    <span class="keyword">var</span> urls = [];</span><br><span class="line">    <span class="keyword">let</span> tasks = [];</span><br><span class="line">    <span class="keyword">let</span> downloadTask = [];</span><br><span class="line">    <span class="keyword">let</span> url = config.url;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= config.size; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> link = url + <span class="string">'_'</span> + i + <span class="string">'.html'</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            link = url + <span class="string">'.html'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tasks.push(getResLink(i, link))</span><br><span class="line">    &#125;</span><br><span class="line">    links = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'links=========='</span>, links.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = links[i];</span><br><span class="line">        <span class="keyword">let</span> index = item.split(<span class="string">'___'</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> src = item.split(<span class="string">'___'</span>)[<span class="number">1</span>];</span><br><span class="line">        downloadTask.push(downloadImg(src, dir, index + links[i].substr(<span class="number">-4</span>, <span class="number">4</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all(downloadTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url, dir, filename</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'download begin---'</span>, url);</span><br><span class="line">    request.get(url).pipe(fs.createWriteStream(dir + <span class="string">"/"</span> + filename)).on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'download success'</span>, url);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResLink</span>(<span class="params">index, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> request(url);</span><br><span class="line">    <span class="keyword">let</span> urls = [];</span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(body);</span><br><span class="line">    $(config.rule).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</span><br><span class="line">        urls.push(src);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> index + <span class="string">'___'</span> + urls[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//初始url</span></span><br><span class="line">    url: <span class="string">'http://www.xieet.com/meinv/230'</span>,</span><br><span class="line">    size: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 选中图片img标签的选择器</span></span><br><span class="line">    rule: <span class="string">'.imgbox a img'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><ol><li>下载我上传的代码<a href="https://github.com/maochunguang/koa-spider" target="_blank" rel="noopener">koa-spider</a></li><li>npm install,npm start即可运行</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/wechat-dev.html"/>
      <url>/wechat-dev.html</url>
      
        <content type="html"><![CDATA[<p>** 微信公众号开发：** &lt;Excerpt in index | 首页摘要&gt;<br>微信公众号开发的一些注意事项</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol><li>微信公众号开发者配置，url，token，</li><li>本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，</li><li>项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置</li></ol><h2 id="回复"><a href="#回复" class="headerlink" title="回复"></a>回复</h2><ol><li>回复和发消息并没有什么特别注意的地方，这里不多说</li></ol><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ol><li>微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单</li><li>个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单</li><li>注意，我在使用时发现<strong>个性化菜单经常会失效</strong>，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试</li></ol><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>授权有网页授权，js sdk授权，<br>网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getSignConfig(originUrl) &#123;</span><br><span class="line">      <span class="keyword">let</span> data = &#123;&#125;</span><br><span class="line">      <span class="keyword">const</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">      <span class="keyword">const</span> appId = <span class="keyword">this</span>.app.config.weixin.appID</span><br><span class="line">      <span class="keyword">const</span> jsapi_ticket = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.token.getJSApiTicket()</span><br><span class="line">      <span class="keyword">const</span> noncestr = <span class="keyword">this</span>.app.config.jsapi.noncestr</span><br><span class="line">      <span class="keyword">const</span> url = <span class="keyword">this</span>.app.config.domain + originUrl</span><br><span class="line">      <span class="keyword">const</span> timestamp = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// sha1加密</span></span><br><span class="line">      <span class="keyword">const</span> str = <span class="string">`jsapi_ticket=<span class="subst">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class="subst">$&#123;noncestr&#125;</span>&amp;timestamp=<span class="subst">$&#123;timestamp&#125;</span>&amp;url=<span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">      sha1.update(str)</span><br><span class="line">      <span class="keyword">const</span> signature = sha1.digest(<span class="string">'hex'</span>)</span><br><span class="line">      data = &#123; jsapi_ticket, noncestr, timestamp, url, signature, appId &#125;</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用js sdk页面上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,</span></span><br><span class="line">    appId: appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature:  signature,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    jsApiList: [<span class="string">'closeWindow'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      wx.closeWindow();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实用的常识"><a href="#实用的常识" class="headerlink" title="实用的常识"></a>实用的常识</h2><ol><li>tag不能重复创建，但是给用户可以重复打同一个tag</li><li>更改菜单一般五分钟生效，或者重新关注公众号，立马能看到</li><li>如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。</li><li>微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭</li><li>微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议<strong>把token过期时间设置为10分钟之内</strong></li></ol><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><ol><li>创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是<strong>json格式问题</strong>，而不是长度</li><li>redirect_uri不合法，是创建授权菜单的redirect_uri和<strong>网页授权域名</strong>配置不一样</li><li>关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为<strong>token过期</strong></li></ol><h2 id="以后遇到其他问题继续补充"><a href="#以后遇到其他问题继续补充" class="headerlink" title="以后遇到其他问题继续补充"></a>以后遇到其他问题继续补充</h2><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javacript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年读的书</title>
      <link href="/mybooks.html"/>
      <url>/mybooks.html</url>
      
        <content type="html"><![CDATA[<p>** 那些年读的书：** &lt;Excerpt in index | 首页摘要&gt;<br>人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="读过哪些种类的"><a href="#读过哪些种类的" class="headerlink" title="读过哪些种类的"></a>读过哪些种类的</h2><ul><li>编程专业类</li><li>小说类</li><li>励志类</li></ul><h2 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h2><ul><li><p>平凡的世界</p></li><li><p>白鹿原</p></li><li><p>穆斯林的葬礼</p></li><li><p>金庸武侠系列</p></li><li><p>古龙武侠小说</p></li><li><p>梁羽生武侠小说</p></li><li><p>余华作品集</p></li><li><p>雷米小说全集（侦探类）</p></li><li><p>网络小说：</p><ul><li>诛仙，</li><li>盗墓笔记，</li><li>泡沫之夏，</li><li>芈月传，</li></ul></li></ul><h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><ul><li><p>java编程思想</p></li><li><p>effective java</p></li><li><p>java并发编程的艺术</p></li><li><p>代码整洁之道</p></li><li><p>黑客与画家</p></li><li><p>深入浅出nodejs</p></li><li><p>nodejs实战</p></li><li><p>js高级程序设计</p></li><li><p>survivejs</p></li><li><p>redux和react中文手册</p></li><li><p>你不知道的javascript</p></li><li><p>算法javascript实现</p></li><li><p>mysql权威指南</p></li><li><p>mongodb权威指南</p></li><li><p>mongodb实战第二版</p></li><li><p>redis入门</p></li></ul><h2 id="经管励志"><a href="#经管励志" class="headerlink" title="经管励志"></a>经管励志</h2><ul><li>时间管理</li><li>一分钟系列</li><li>番茄工作法图解</li></ul><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费的开源书籍</title>
      <link href="/free-books.html"/>
      <url>/free-books.html</url>
      
        <content type="html"><![CDATA[<p>** 免费的开源书籍：** &lt;Excerpt in index | 首页摘要&gt;<br>国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#语言无关">语言无关</a><ul><li><a href="#ide">IDE</a></li><li><a href="#mysql">MySQL</a></li><li><a href="#nosql">NoSQL</a></li><li><a href="#postgresql">PostgreSQL</a></li><li><a href="#web">Web</a></li><li><a href="#web服务器">WEB服务器</a></li><li><a href="#其它">其它</a></li><li><a href="#函数式概念">函数式概念</a></li><li><a href="#分布式系统">分布式系统</a></li><li><a href="#在线教育">在线教育</a></li><li><a href="#大数据">大数据</a></li><li><a href="#操作系统">操作系统</a></li><li><a href="#数据库">数据库</a></li><li><a href="#智能系统">智能系统</a></li><li><a href="#正则表达式">正则表达式</a></li><li><a href="#版本控制">版本控制</a></li><li><a href="#程序员杂谈">程序员杂谈</a></li><li><a href="#管理和监控">管理和监控</a></li><li><a href="#编程艺术">编程艺术</a></li><li><a href="#编译原理">编译原理</a></li><li><a href="#编辑器">编辑器</a></li><li><a href="#计算机图形学">计算机图形学</a></li><li><a href="#设计模式">设计模式</a></li><li><a href="#软件开发方法">软件开发方法</a></li><li><a href="#项目相关">项目相关</a></li></ul></li><li><a href="#语言相关">语言相关</a><ul><li><a href="#android">Android</a></li><li><a href="#awk">AWK</a></li><li><a href="#c">C</a></li><li><a href="#c-sharp">C#</a></li><li><a href="#c-1">C++</a></li><li><a href="#coffeescript">CoffeeScript</a></li><li><a href="#dart">Dart</a></li><li><a href="#elasticsearch">Elasticsearch</a></li><li><a href="#elixir">Elixir</a></li><li><a href="#erlang">Erlang</a></li><li><a href="#fortran">Fortran</a></li><li><a href="#golang">Golang</a></li><li><a href="#haskell">Haskell</a></li><li><a href="#html--css">HTML / CSS</a></li><li><a href="#http">HTTP</a></li><li><a href="#ios">iOS</a></li><li><a href="#java">Java</a></li><li><a href="#javascript">JavaScript</a></li><li><a href="#latex">LaTeX</a></li><li><a href="#lisp">LISP</a></li><li><a href="#lua">Lua</a></li><li><a href="#markdown">Markdown</a></li><li><a href="#nodejs">Node.js</a></li><li><a href="#perl">Perl</a></li><li><a href="#php">PHP</a></li><li><a href="#python">Python</a></li><li><a href="#r">R</a></li><li><a href="#restructuredtext">reStructuredText</a></li><li><a href="#ruby">Ruby</a></li><li><a href="#rust">Rust</a></li><li><a href="#scala">Scala</a></li><li><a href="#scheme">Scheme</a></li><li><a href="#shell">Shell</a></li><li><a href="#swift">Swift</a></li><li><a href="#vim">Vim</a></li><li><a href="#visual-prolog">Visual Prolog</a></li></ul></li></ul><h2 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h2><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="noopener">IntelliJ IDEA 简体中文专题教程</a></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="noopener">21分钟MySQL入门教程</a></li><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></li></ul><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><ul><li><a href="http://disquebook.com" target="_blank" rel="noopener">Disque 使用教程</a></li><li><a href="http://neo4j.tw" target="_blank" rel="noopener">Neo4j .rb 中文資源</a></li><li><a href="http://docs.neo4j.org.cn" target="_blank" rel="noopener">Neo4j 简体中文手册 v1.8</a></li><li><a href="http://redisdoc.com" target="_blank" rel="noopener">Redis 命令参考</a></li><li><a href="http://redisbook.com" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="noopener">The Little MongoDB Book</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="noopener">The Little Redis Book</a></li><li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="noopener">带有详细注释的 Redis 2.6 代码</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">带有详细注释的 Redis 3.0 代码</a></li></ul><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><ul><li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="noopener">PostgreSQL 8.2.3 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="noopener">PostgreSQL 9.3.1 中文文档</a></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul><li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="noopener">3 Web Designs in 3 Weeks</a></li><li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="noopener">Chrome 开发者工具中文手册</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="noopener">Chrome扩展开发文档</a></li><li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="noopener">Growth: 全栈增长工程师指南</a></li><li><a href="http://www.gruntjs.net" target="_blank" rel="noopener">Grunt中文文档</a></li><li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="noopener">Gulp 入门指南</a></li><li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulp中文文档</a></li><li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="noopener">HTTP 接口设计指北</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="noopener">HTTP/2.0 中文翻译</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="noopener">http2讲解</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">JSON风格指南</a></li><li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="noopener">Wireshark用户手册</a></li><li><a href="https://community.emc.com/thread/194901" target="_blank" rel="noopener">一站式学习Wireshark</a></li><li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="noopener">关于浏览器和网络的 20 项须知</a></li><li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="noopener">前端代码规范 及 最佳实践</a></li><li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="noopener">前端开发体系建设日记</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="noopener">前端资源分享（一）</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="noopener">前端资源分享（二）</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="noopener">浏览器开发工具的秘密</a></li><li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="noopener">移动Web前端知识库</a></li><li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="noopener">移动前端开发收藏夹</a></li></ul><h2 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h2><ul><li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="noopener">Apache 中文手册</a></li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="noopener">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/" target="_blank" rel="noopener">OpenWrt智能、自动、透明翻墙路由器教程</a></li><li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="noopener">SAN 管理入门系列</a></li><li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="noopener">Sketch 中文手册</a></li><li><a href="http://ifeve.com/perfbook/" target="_blank" rel="noopener">深入理解并行编程</a></li></ul><h2 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h2><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="noopener">傻瓜函数编程</a></li></ul><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="noopener">走向分布式</a> (PDF)</li></ul><h2 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h2><ul><li><a href="http://edu.51cto.com" target="_blank" rel="noopener">51CTO学院</a></li><li><a href="https://www.codecademy.com/?locale_code=zh" target="_blank" rel="noopener">Codecademy</a></li><li><a href="https://www.codeschool.com" target="_blank" rel="noopener">CodeSchool</a></li><li><a href="https://www.coursera.org/courses?orderby=upcoming&lngs=zh" target="_blank" rel="noopener">Coursera</a></li><li><a href="https://learnxinyminutes.com" target="_blank" rel="noopener">Learn X in Y minutes</a> (数十种语言快速入门教程)</li><li><a href="https://www.shiyanlou.com" target="_blank" rel="noopener">shiyanlou</a></li><li><a href="https://teamtreehouse.com" target="_blank" rel="noopener">TeamTreeHouse</a></li><li><a href="https://www.udacity.com" target="_blank" rel="noopener">Udacity</a></li><li><a href="https://www.xuetangx.com" target="_blank" rel="noopener">xuetangX</a></li><li><a href="http://www.imooc.com/course/list" target="_blank" rel="noopener">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li><li><a href="http://www.jikexueyuan.com" target="_blank" rel="noopener">极客学院</a></li><li><a href="http://www.jisuanke.com" target="_blank" rel="noopener">计蒜客</a></li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="noopener">Spark 编程指南简体中文版</a></li><li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="noopener">大型集群上的快速和通用数据处理架构</a></li><li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="noopener">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li><li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="noopener">数据挖掘中经典的算法实现和详细的注释</a></li><li><a href="http://dataminingguide.books.yourtion.com" target="_blank" rel="noopener">面向程序员的数据挖掘指南</a></li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul><li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="noopener">Debian 参考手册 </a></li><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">Docker —— 从入门到实践</a></li><li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="noopener">Docker中文指南</a></li><li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="noopener">Docker入门实战</a></li><li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="noopener">FreeBSD 使用手册</a></li><li><a href="http://freeradius.akagi201.org" target="_blank" rel="noopener">FreeRADIUS新手入门</a></li><li><a href="https://tinylab.gitbooks.io/linux-doc/content/zh-cn/" target="_blank" rel="noopener">Linux Documentation (中文版)</a></li><li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="noopener">Linux Guide for Complete Beginners</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="noopener">Linux 构建指南</a></li><li><a href="http://sourceforge.net/projects/elpi/" target="_blank" rel="noopener">Linux 系统高级编程</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="noopener">Linux工具快速教程</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="noopener">Mac 开发配置手册</a></li><li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener">Operating Systems: Three Easy Pieces</a></li><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="noopener">The Linux Command Line</a> (中英文版)</li><li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="noopener">Ubuntu 参考手册 </a></li><li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="noopener">uCore Lab: Operating System Course in Tsinghua University</a></li><li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="noopener">UNIX TOOLBOX</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a></li><li><a href="https://tinylab.gitbooks.io/elinux/content/zh/" target="_blank" rel="noopener">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li><li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="noopener">开源世界旅行手册</a></li><li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="noopener">深入分析Linux内核源码</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="noopener">理解Linux进程</a></li><li><a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php" target="_blank" rel="noopener">鸟哥的 Linux 私房菜 基础学习篇</a></li><li><a href="http://vbird.dic.ksu.edu.tw/linux_server/" target="_blank" rel="noopener">鸟哥的 Linux 私房菜 服务器架设篇</a></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><a href="http://redisbook.com" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="noopener">The Little MongoDB Book 中文版</a></li></ul><h2 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h2><ul><li><a href="https://github.com/phodal/designiot" target="_blank" rel="noopener">一步步搭建物联网系统</a></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">Git - 简易指南</a></li><li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="noopener">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li><li><a href="http://gitbook.liuhui998.com" target="_blank" rel="noopener">Git Community Book 中文版</a></li><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a></li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">Git magic</a></li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">Git Magic</a></li><li><a href="http://gitref.justjavac.com" target="_blank" rel="noopener">Git 参考手册</a></li><li><a href="https://github.com/waylau/github-help" target="_blank" rel="noopener">Github帮助文档</a></li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/" target="_blank" rel="noopener">GitHub秘籍</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="noopener">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="noopener">iTunes</a> 购买）</li><li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="noopener">Got GitHub</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noopener">GotGitHub</a></li><li><a href="http://bucunzai.net/hginit/" target="_blank" rel="noopener">HgInit (中文版)</a></li><li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="noopener">Mercurial 使用教程</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li><li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="noopener">Pro Git 中文版</a> (整理在gitbook上)</li><li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="noopener">svn 手册</a></li><li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="noopener">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li><li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="noopener">沉浸式学 Git</a></li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li></ul><h2 id="程序员杂谈"><a href="#程序员杂谈" class="headerlink" title="程序员杂谈"></a>程序员杂谈</h2><ul><li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="noopener">程序员的自我修养</a></li></ul><h2 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h2><ul><li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="noopener">ElasticSearch 权威指南</a></li><li><a href="http://es.xiaoleilu.com" target="_blank" rel="noopener">Elasticsearch 权威指南（中文版）</a></li><li><a href="http://kibana.logstash.es" target="_blank" rel="noopener">ELKstack 中文指南</a></li><li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="noopener">Logstash 最佳实践</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="noopener">Mastering Elasticsearch(中文版)</a></li><li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="noopener">Puppet 2.7 Cookbook 中文版</a></li></ul><h2 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h2><ul><li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="noopener">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li><li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="noopener">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="noopener">程序员编程艺术</a></li><li><a href="http://www.kancloud.cn/kancloud/intro-to-prog/52592" target="_blank" rel="noopener">编程入门指南</a></li></ul><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><ul><li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="noopener">《计算机程序的结构和解释》公开课 翻译项目</a></li></ul><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="noopener">exvim–vim 改良成IDE项目</a></li><li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="noopener">Vim中文文档</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="noopener">所需即所获：像 IDE 一样使用 vim</a></li><li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="noopener">笨方法学Vimscript 中译本</a></li></ul><h2 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h2><ul><li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="noopener">OpenGL 教程</a></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="noopener">史上最全设计模式导学目录</a></li><li><a href="https://github.com/me115/design_patterns" target="_blank" rel="noopener">图说设计模式</a></li></ul><h2 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h2><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="noopener">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li><li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="noopener">硝烟中的 Scrum 和 XP</a></li></ul><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><ul><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="noopener">Gradle 2 用户指南</a></li><li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="noopener">Gradle 中文使用文档</a></li><li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified)" target="_blank" rel="noopener">Joel谈软件</a></li><li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="noopener">selenium 中文文档</a></li><li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="noopener">开源软件架构</a></li><li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="noopener">持续集成（第二版）</a> (译言网)</li><li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="noopener">約耳談軟體(Joel on Software)</a></li><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">编码规范</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="noopener">让开发自动化系列专栏</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="noopener">追求代码质量</a></li></ul><h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul><li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="noopener">Android Design(中文版)</a></li><li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="noopener">Android Note(开发过程中积累的知识点)</a></li><li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io" target="_blank" rel="noopener">Android6.0新特性详解</a></li><li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="noopener">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="noopener">Android开发技术前线(android-tech-frontier)</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">Google Android官方培训课程中文版</a></li><li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="noopener">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="noopener">译本二</a>)</li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="noopener">Material Design 中文版</a></li><li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="noopener">Point-of-Android</a> Android 一些重要知识点解析整理</li></ul><h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><ul><li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">awk中文指南</a></li><li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="noopener">awk程序设计语言</a></li></ul><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><ul><li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="noopener">C 语言常见问题集</a></li><li><a href="http://doc.lellansin.com" target="_blank" rel="noopener">C/C++ 学习教程</a></li><li><a href="http://docs.linuxtone.org/ebooks/C&CPP/c/" target="_blank" rel="noopener">Linux C 编程一站式学习</a></li><li><a href="https://github.com/limingth/NCCL" target="_blank" rel="noopener">新概念 C 语言教程</a></li></ul><h2 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h2><ul><li><a href="http://book.douban.com/subject/24827879/" target="_blank" rel="noopener">精通C#(第6版) </a></li></ul><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><ul><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gcc小技巧</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gdb小技巧</a></li><li><a href="https://tinylab.gitbooks.io/cbook/content/" target="_blank" rel="noopener">C 语言编程透视</a></li><li><a href="https://github.com/andycai/cprimer" target="_blank" rel="noopener">C/C++ Primer</a> - @andycai</li><li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="noopener">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="noopener">C++ Primer 5th Answers</a></li><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="noopener">C++ Template 进阶指南</a></li><li><a href="http://www.prglab.com/cms/" target="_blank" rel="noopener">C++ 基础教程</a></li><li><a href="https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/" target="_blank" rel="noopener">C++ 并发编程(基于C++11)</a></li><li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="noopener">C++ 并发编程指南</a></li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="noopener">CGDB中文手册</a></li><li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="noopener">Cmake 实践</a> (PDF版)</li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="noopener">Google C++ 风格指南</a></li><li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="noopener">QT 教程</a></li><li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="noopener">ZMQ 指南</a></li><li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="noopener">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li><li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="noopener">简单易懂的C魔法</a></li><li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="noopener">跟我一起写Makefile(PDF)</a> (PDF)</li></ul><h2 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h2><ul><li><a href="http://coffee-script.org" target="_blank" rel="noopener">CoffeeScript 中文</a></li><li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="noopener">CoffeeScript 编程风格指南</a></li></ul><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><ul><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="noopener">Dart 语言导览</a></li></ul><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul><li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="noopener">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li><li><a href="http://kibana.logstash.es" target="_blank" rel="noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="noopener">Mastering Elasticsearch(中文版)</a></li></ul><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><ul><li><a href="https://github.com/Ljzn/ElixrGettingStartedChinese" target="_blank" rel="noopener">Elixir Getting Started 中文翻译</a></li><li><a href="https://elixirschool.com/cn/" target="_blank" rel="noopener">Elixir 编程语言教程</a> (Elixir School)</li><li><a href="https://github.com/Ljzn/MetaProgrammingInElixirChinese" target="_blank" rel="noopener">Elixir元编程与DSL 中文翻译</a></li><li><a href="https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/" target="_blank" rel="noopener">Phoenix 框架中文文档</a></li></ul><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2><ul><li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="noopener">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li></ul><h2 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h2><ul><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="noopener">Fortran77和90/95编程入门</a></li></ul><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul><li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">Go Web 编程</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go 入门指南</a> (《The Way to Go》中文版)</li><li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="noopener">Go 官方文档翻译</a></li><li><a href="http://go-tour-zh.appsp0t.com" target="_blank" rel="noopener">Go 指南</a> (《A Tour of Go》中文版)</li><li><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="noopener">Go 简易教程</a> (《<a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="noopener">The Little Go Book</a>》中文版)</li><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">Go 编程基础</a></li><li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="noopener">Go 语言标准库</a></li><li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="noopener">Go命令教程</a></li><li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="noopener">Go实战开发</a></li><li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="noopener">Go语言博客实践</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="noopener">Java程序员的Golang入门指南</a></li><li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="noopener">Network programming with Go 中文翻译版本</a></li><li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="noopener">Revel 框架手册</a></li><li><a href="http://mikespook.com/learning-go/" target="_blank" rel="noopener">学习Go语言</a></li></ul><h2 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h2><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="noopener">实战 Groovy 系列</a></li></ul><h2 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h2><ul><li><a href="http://learnyoua.haskell.sg" target="_blank" rel="noopener">Haskell 趣学指南</a></li><li><a href="http://cnhaskell.com" target="_blank" rel="noopener">Real World Haskell 中文版</a></li></ul><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML / CSS"></a>HTML / CSS</h2><ul><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="noopener">CSS3 Tutorial 《CSS3 教程》</a></li><li><a href="http://css.doyoe.com" target="_blank" rel="noopener">CSS参考手册</a></li><li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="noopener">Emmet 文档</a></li><li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="noopener">HTML5 教程</a></li><li><a href="http://codeguide.bootcss.com" target="_blank" rel="noopener">HTML和CSS编码规范</a></li><li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="noopener">Sass Guidelines 中文</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">前端代码规范</a> (腾讯 AlloyTeam 团队)</li><li><a href="http://zh.learnlayout.com" target="_blank" rel="noopener">学习CSS布局</a></li><li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="noopener">通用 CSS 笔记、建议与指导</a></li></ul><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul><li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="noopener">Apple Watch开发初探</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="noopener">Google Objective-C Style Guide 中文版</a></li><li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="noopener">iOS7人机界面指南</a></li><li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="noopener">iOS开发60分钟入门</a></li><li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="noopener">iPhone 6 屏幕揭秘</a></li><li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="noopener">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="noopener">Activiti 5.x 用户指南</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="noopener">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="noopener">Apache Shiro 用户指南</a></li><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="noopener">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="noopener">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="noopener">JSSE 参考指南</a></li><li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis中文文档</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="noopener">REST 实战</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="noopener">Spring Boot参考指南</a> (翻译中)</li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="noopener">用jersey构建REST服务</a></li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul><li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="noopener">Airbnb JavaScript 规范</a></li><li>AngularJS<ul><li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="noopener">AngularJS中译本</a></li><li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="noopener">AngularJS入门教程</a></li><li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="noopener">AngularJS最佳实践和风格指南</a></li><li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="noopener">在Windows环境下用Yeoman构建AngularJS项目</a></li><li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="noopener">构建自己的AngularJS</a></li></ul></li><li>backbone.js<ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="noopener">backbone.js中文文档</a></li><li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="noopener">backbone.js入门教程</a> (PDF)</li><li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="noopener">Backbone.js入门教程第二版</a></li><li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="noopener">Developing Backbone.js Applications(中文版)</a></li></ul></li><li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="noopener">Chrome扩展及应用开发</a></li><li>CoffeeScript<ul><li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="noopener">CoffeeScript 编码风格指南</a></li></ul></li><li>D3.js<ul><li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="noopener">D3.js 入门系列</a> (还有进阶、高级等系列)</li><li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="noopener">官方API文档</a></li><li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="noopener">张天旭的D3教程</a></li><li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="noopener">楚狂人的D3教程</a></li></ul></li><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ECMAScript 6 入门</a> (作者：阮一峰)</li><li>ExtJS<ul><li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="noopener">Ext4.1.0 中文文档</a></li></ul></li><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="noopener">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">Google JSON 风格指南</a></li><li>impress.js<ul><li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="noopener">impress.js的中文教程</a></li></ul></li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书</a></li><li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="noopener">Javascript 原理</a></li><li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a></li><li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="noopener">《JavaScript 模式》</a> “JavaScript patterns”中译本</li><li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="noopener">javascript 的 12 个怪癖</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></li><li><a href="http://icodeit.org/jsccp/" target="_blank" rel="noopener">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li><li><a href="http://pij.robinqu.me" target="_blank" rel="noopener">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="noopener">源码</a>)</li><li>jQuery<ul><li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="noopener">How to write jQuery plugin</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="noopener">简单易懂的JQuery魔法</a></li></ul></li><li>Meteor<ul><li><a href="http://zh.discovermeteor.com" target="_blank" rel="noopener">Discover Meteor</a></li></ul></li><li>Node.js<ul><li><a href="http://expressjs.jser.us" target="_blank" rel="noopener">express.js 中文文档</a></li><li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express框架</a></li><li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="noopener">koa 中文文档</a></li><li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="noopener">Learn You The Node.js For Much Win! (中文版)</a></li><li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="noopener">Node debug 三法三例</a></li><li><a href="https://github.com/jollen/nodejs-fullstack-lessons" target="_blank" rel="noopener">Node.js Fullstack《從零到一的進撃》</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></li><li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="noopener">Nodejs Wiki Book</a> (繁体中文)</li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="noopener">nodejs中文文档</a></li><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></li><li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">使用 Express + MongoDB 搭建多人博客</a></li></ul></li><li>React.js<ul><li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="noopener">Learn React &amp; Webpack by building the Hacker News front page</a></li><li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="noopener">React Native 中文文档(含最新Android内容)</a></li><li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="noopener">React webpack-cookbook</a></li><li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="noopener">React 入门教程</a></li><li><a href="http://reactjs.cn" target="_blank" rel="noopener">React.js 中文文档</a></li></ul></li><li>underscore.js<ul><li><a href="http://learningcn.com/underscore/" target="_blank" rel="noopener">Underscore.js中文文档</a></li></ul></li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li><li>Zepto.js<ul><li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="noopener">Zepto.js 中文文档</a></li></ul></li><li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="noopener">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="noopener">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="noopener">学用 JavaScript 设计模式</a> (开源中国)</li><li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="noopener">深入理解JavaScript系列</a></li></ul><h2 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h2><ul><li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="noopener">LaTeX 笔记</a></li><li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="noopener">一份不太简短的 LaTeX2ε 介绍</a></li><li><a href="https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf" target="_blank" rel="noopener">大家來學 LaTeX</a> (PDF)</li></ul><h2 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h2><ul><li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="noopener">ANSI Common Lisp 中文翻译版</a></li><li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="noopener">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li></ul><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><ul><li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="noopener">Lua 5.3 参考手册</a></li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">Markdown 快速入门</a></li><li><a href="http://www.jianshu.com/p/7bd23251da0a" target="_blank" rel="noopener">Markdown 简明教程</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明</a></li><li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a></li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node 入门</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="noopener">The NodeJS 中文文档</a>（社区翻译）</li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a> 阿里出品，很好的入门资料</li></ul><h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><ul><li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="noopener">Master Perl Today</a></li><li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="noopener">《Modern Perl》中文版</a></li><li><a href="http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm" target="_blank" rel="noopener">Perl 5 教程</a></li><li><a href="http://www.yiibai.com/perl" target="_blank" rel="noopener">Perl 教程</a></li></ul><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul><li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="noopener">PHP 之道</a></li><li><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP5中文手册</a></li><li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="noopener">PHP扩展开发及内核应用</a></li><li><a href="https://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="noopener">Symfony2 实例教程</a></li><li><a href="http://www.php-internals.com/book/" target="_blank" rel="noopener">深入理解 PHP 内核</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">Django book 2.0</a></li><li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="noopener">Python 3 文档(简体中文) 3.2.2 documentation</a></li><li><a href="http://www.pythondoc.com" target="_blank" rel="noopener">Python 中文学习大本营</a></li><li><a href="https://github.com/jiechic/diveintopython3" target="_blank" rel="noopener">深入 Python 3</a></li><li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="noopener">笨办法学 Python</a></li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><ul><li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="noopener">153分钟学会 R</a> (PDF)</li><li><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="noopener">《R for beginners》中文版</a> (PDF)</li><li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="noopener">R 导论</a> (《An Introduction to R》中文版) (PDF)</li><li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="noopener">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li><li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="noopener">统计学与 R 读书笔记</a> (PDF)</li></ul><h2 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h2><ul><li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="noopener">reStructuredText 入门</a></li><li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="noopener">reStructuredText 简明教程</a></li></ul><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><ul><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Rails 风格指南</a></li><li><a href="http://railstutorial-china.org" target="_blank" rel="noopener">Ruby on Rails Tutorial 原书第 2 版</a></li><li><a href="https://ihower.tw/rails4/" target="_blank" rel="noopener">Ruby on Rails 实战圣经</a></li><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Ruby 风格指南</a></li><li><a href="http://lrthw.github.io" target="_blank" rel="noopener">笨方法学 Ruby</a></li></ul><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><ul><li><a href="https://github.com/KaiserY/rust-book-chinese" target="_blank" rel="noopener">Rust 官方教程</a></li><li><a href="https://github.com/photino/rust-notes" target="_blank" rel="noopener">Rust 语言学习笔记</a></li><li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="noopener">RustPrimer</a></li><li><a href="https://github.com/rustcc/rust-by-example/" target="_blank" rel="noopener">通过例子学习 Rust</a></li></ul><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><ul><li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="noopener">Effective Scala</a></li><li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="noopener">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="noopener">Scala 课堂</a> (Twitter的Scala中文教程)</li></ul><h2 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h2><ul><li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="noopener">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">Shell 编程基础</a></li><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="noopener">Shell 脚本编程30分钟入门</a></li><li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="noopener">The Linux Command Line 中文版</a></li></ul><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><ul><li><a href="https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details" target="_blank" rel="noopener">《The Swift Programming Language》中文版</a></li></ul><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul><li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="noopener">Vim Manual(中文版)</a></li><li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="noopener">大家來學 VIM</a></li></ul><h2 id="Visual-Prolog"><a href="#Visual-Prolog" class="headerlink" title="Visual Prolog"></a>Visual Prolog</h2><ul><li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="noopener">Visual Prolog 7初学指南</a></li><li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="noopener">Visual Prolog 7边练边学</a></li></ul><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置和优化记录</title>
      <link href="/hexo-config.html"/>
      <url>/hexo-config.html</url>
      
        <content type="html"><![CDATA[<p>** hexo配置和优化高级篇：** &lt;Excerpt in index | 首页摘要&gt;<br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p><h2 id="实用的功能"><a href="#实用的功能" class="headerlink" title="实用的功能"></a>实用的功能</h2><ol><li>站内搜索（百度的）</li><li>本地搜索（本地插件）</li><li>网站统计</li><li>留言功能</li><li>rss订阅功能</li></ol><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ol><li>html压缩</li><li>css压缩</li><li>js压缩·</li><li>img压缩</li><li>nginx代理，开启gzip压缩</li><li>cdn代理css和图·片</li><li>删除主题无用的js和css</li></ol><h2 id="seo优化"><a href="#seo优化" class="headerlink" title="seo优化"></a>seo优化</h2><ol><li>sitemap</li><li>对于没有价值的外链a标签添加<code>rel=&quot;external nofollow&quot;</code></li><li>使用meta标签</li><li>使用robots文件</li><li>主动提交sitemap到搜索引擎</li><li>添加外链和内链</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu服务器详细配置</title>
      <link href="/server-config.html"/>
      <url>/server-config.html</url>
      
        <content type="html"><![CDATA[<p>** ubuntu服务器私人定制：** &lt;Excerpt in index | 首页摘要&gt;<br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><p>##　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p><p>##　用户密码管理<br><code>sudo passwd root</code></p><ol><li><p>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></p></li><li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p></li><li><p>修改用户的密码<br><code>sudo passwd wyx</code></p></li><li><p>删除一个用户<br><code>sudo userdel wyx</code></p></li><li><p>为该用户添加sudo权限</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G adm wyx</span><br><span class="line">sudo usermod -a -G sudo wyx</span><br></pre></td></tr></table></figure><ol start="6"><li>查看所有用户和用户组：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li><li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li><li>设置默认的node版本<code>nvm alias default v4.4.4</code></li><li>安装npm3  <code>npm install -g npm@3</code></li><li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>验证安装<code>node -v,npm -v,cnpm -v</code><h2 id="安装node常用包"><a href="#安装node常用包" class="headerlink" title="安装node常用包"></a>安装node常用包</h2></li><li>安装pm2<code>cnpm install -g pm2</code></li><li>安装hexo博客<code>cnpm install -g hexo-cli</code></li><li>安装同步插件rsync<code>cnpm install -g rsync</code></li></ol><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li>apt安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker.io</span><br><span class="line">sudo ln -sf /usr/bin/docker.io /usr/<span class="built_in">local</span>/bin/docker</span><br><span class="line">sudo sed -i <span class="string">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</span><br></pre></td></tr></table></figure><ol start="2"><li>源码安装最新版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</span><br><span class="line">sudo bash -c <span class="string">"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install lxc-docker</span><br></pre></td></tr></table></figure><ol start="3"><li>验证安装版本<br><code>docker -v</code></li></ol><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><ol><li>安装3.0</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</span><br><span class="line">apt-get update  </span><br><span class="line">apt-get install mongodb-org</span><br></pre></td></tr></table></figure><ol start="2"><li>安装3.2最新版</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/ubuntu "</span>$(lsb_release -sc)<span class="string">"/mongodb-org/3.2 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mongodb-org</span><br></pre></td></tr></table></figure><ol start="3"><li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p></li><li><p>启动服务</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod start</span><br><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure><ol start="5"><li>验证安装<br><code>mongod --version</code></li></ol><p>配置</p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br><span class="line">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</span><br><span class="line"><span class="built_in">cd</span> /usr/lib/jvm</span><br><span class="line">sudo mv jdk1.7.0_21 java</span><br><span class="line"></span><br><span class="line">sudo vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>常见的方法有两种。</p><ol><li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p></li><li><p>在 /etc/profile中增加</p><pre><code class="bash">PATH=<span class="string">"<span class="variable">$PATH</span>:/home/zhengb66/bin"</span> <span class="built_in">export</span> PATH</code></pre></li></ol><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><ol><li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p></li><li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p></li></ol><p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p><ol><li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p></li><li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p><h2 id="ftp和rsync配置"><a href="#ftp和rsync配置" class="headerlink" title="ftp和rsync配置"></a>ftp和rsync配置</h2></li></ol><h2 id="持续集成环境"><a href="#持续集成环境" class="headerlink" title="持续集成环境"></a>持续集成环境</h2><ol><li>jenkens配置</li><li>gitlab配置</li><li>git服务器</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac开发环境配置</title>
      <link href="/mac-dev.html"/>
      <url>/mac-dev.html</url>
      
        <content type="html"><![CDATA[<p>** mac开发环境配置：** &lt;Excerpt in index | 首页摘要&gt;<br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="软件下载说明"><a href="#软件下载说明" class="headerlink" title="软件下载说明"></a>软件下载说明</h2><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p><h2 id="软件分类说明"><a href="#软件分类说明" class="headerlink" title="软件分类说明"></a>软件分类说明</h2><ol><li>通用（开发者必备的软件）</li><li>java类（java开发者必不可少）</li><li>前端类（偏前端和nodejs）</li><li>python类</li><li>数据库类</li><li>其他（php，ruby等等）</li></ol><h2 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h2><ol><li>Alfred</li><li>dash</li><li>homebrew</li><li>zsh（oh my zsh）</li><li>sublime text3,</li><li>vscode</li><li>paste(剪切板工具)</li><li>BetterSnapTool(分屏软件)</li><li>cornerstone(svn)</li><li>tower(git)</li><li>alternote()</li><li>paw</li><li>chrome</li><li>firefox</li><li>pdf expert</li><li>CheatSheet</li><li>snippetslab</li></ol><h2 id="java软件"><a href="#java软件" class="headerlink" title="java软件"></a>java软件</h2><ol><li>jdk</li><li>idea</li><li>eclipse</li><li>maven</li><li>zookeeper,dubbo</li><li>tomcat</li><li>apache</li></ol><h2 id="前端必备"><a href="#前端必备" class="headerlink" title="前端必备"></a>前端必备</h2><ol><li>nvm(nodejs,npm,cnpm)</li><li>webpack</li><li>yo</li><li>webstorm</li></ol><h2 id="python必备"><a href="#python必备" class="headerlink" title="python必备"></a>python必备</h2><ol><li>pycharm</li><li>sublime text（插件）</li></ol><h2 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h2><ol><li>mysql</li><li>mongodb</li><li>sqllite</li><li>navicate</li><li>robomongo</li><li>redis</li></ol><h2 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h2><ol><li>office</li><li>keynote,pages,number</li><li>photoshop</li></ol><p>文章长期更新，请收藏</p><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atom中最好的js代码补全</title>
      <link href="/best-js-snippet.html"/>
      <url>/best-js-snippet.html</url>
      
        <content type="html"><![CDATA[<p>** atom中最好的js代码补全：** &lt;Excerpt in index | 首页摘要&gt;<br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="best-js-snippets"><a href="#best-js-snippets" class="headerlink" title="best-js-snippets"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src="http://o7kalf5h3.bkt.clouddn.com/snippets.png" alt="best-js-snippets"></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>express补全</li><li>es6补全</li><li>js补全(string,dom操作)</li><li>nodejs补全(fs,event,util,module,class,assert)</li></ol><h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><ol><li>atom编辑器中找到设置,搜索package,安装即可.</li><li>重启atom,享受吧!</li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法学习</title>
      <link href="/sort-study.html"/>
      <url>/sort-study.html</url>
      
        <content type="html"><![CDATA[<p>** 常用排序算法学习：** &lt;Excerpt in index | 首页摘要&gt;<br>    程序员各种排序算法，算法的实现和分析<br> <a id="more"></a><br>&lt;The rest of contents | 余下全文&gt;</p><h2 id="排序算法的分类"><a href="#排序算法的分类" class="headerlink" title="排序算法的分类"></a>排序算法的分类</h2><ol><li>排序分内排序和外排序。</li><li>内排序:指在排序期间数据对象全部存放在内存的排序。</li><li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li><li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li><li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li><li>选择排序主要包括直接选择排序和堆排序;</li><li>交换排序主要包括冒泡排序和快速排序;</li><li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li><li>分配排序主要包括箱排序和基数排序</li></ol><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul><li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> length = arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                <span class="built_in">console</span>.log(arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li><li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = [];</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat(pivot, quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(a));</span><br></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><ul><li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp, inner;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> outer = <span class="number">1</span>; outer &lt;= arr.length - <span class="number">1</span>; ++outer) &#123;</span><br><span class="line">        temp = arr[outer];</span><br><span class="line">        inner = outer;</span><br><span class="line">        <span class="keyword">while</span> (inner &gt; <span class="number">0</span> &amp;&amp; (arr[inner - <span class="number">1</span>] &gt;= temp)) &#123;</span><br><span class="line">            arr[inner] = arr[inner - <span class="number">1</span>];</span><br><span class="line">            --inner;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[inner] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(insertionSort(a));</span><br></pre></td></tr></table></figure><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><ul><li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li></ul><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul><li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li><li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li></ul><h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><ul><li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul><li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li></ul><h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><ul><li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化的常用方法</title>
      <link href="/mysql-optimize.html"/>
      <url>/mysql-optimize.html</url>
      
        <content type="html"><![CDATA[<p>** mysql优化：** &lt;Excerpt in index | 首页摘要&gt;<br>    mysql的优化措施，从sql优化做起</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="优化sql的一般步骤"><a href="#优化sql的一般步骤" class="headerlink" title="优化sql的一般步骤"></a>优化sql的一般步骤</h2><ol><li>通过show status了解各种sql的执行频率</li><li>定位执行效率低的sql语句</li><li>通过explain分析效率低的sql</li><li>通过show profile分析sql</li><li>通过trace分析优化器如何选择执行计划</li><li>确定问题，采取措施优化</li></ol><h2 id="索引优化措施"><a href="#索引优化措施" class="headerlink" title="索引优化措施"></a>索引优化措施</h2><ol><li><p>mysql中使用索引的典型场景</p><ol><li>匹配全值，条件所有列都在索引中而且是等值匹配</li><li>匹配值的范围查找，字段必须在索引中</li><li>匹配最左前缀，复合索引只会根据最左列进行查找</li><li>仅仅对索引进行查询，即查询的所有字段都在索引上</li><li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li><li>如果列名是索引，使用column is null会使用索引</li></ol></li><li><p>存在索引但不会使用索引的典型场景</p><ol><li>以%开头的like查询不能使用b树索引</li><li>数据类型出现隐式转换不能使用索引</li><li>复合索引，查询条件不符合最左列原则</li><li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li></ol></li><li><p>查看索引使用的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;Handler_read%&apos;;</span><br></pre></td></tr></table></figure></li></ol><p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p><h2 id="简单实用的优化方法"><a href="#简单实用的优化方法" class="headerlink" title="简单实用的优化方法"></a>简单实用的优化方法</h2><ol><li>定期检查表和分析表<br>分析表语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">analyze table 表名；</span><br></pre></td></tr></table></figure></li></ol><p>检查表语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check table 表名；</span><br></pre></td></tr></table></figure><ol start="2"><li>定期优化表<ul><li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimize table user(表名)；</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下mysql5.6字符集设置</title>
      <link href="/mac-mysql-unicode.html"/>
      <url>/mac-mysql-unicode.html</url>
      
        <content type="html"><![CDATA[<p>** mac下mysql5.6字符集设置：** &lt;Excerpt in index | 首页摘要&gt;<br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="为什么要设置字符集"><a href="#为什么要设置字符集" class="headerlink" title="为什么要设置字符集"></a>为什么要设置字符集</h2><ol><li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li><li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li></ol><h2 id="mac下设置"><a href="#mac下设置" class="headerlink" title="mac下设置"></a>mac下设置</h2><ul><li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/support-files</span><br><span class="line">sudo cp my.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></li></ul><p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 664 /etc/my.cnf</span><br></pre></td></tr></table></figure><ul><li>my.cnf设置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation-server = utf8_unicode_ci</span><br><span class="line">init-connect=&apos;SET NAMES utf8&apos;</span><br><span class="line">character-set-server = utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看设置是否成功"><a href="#查看设置是否成功" class="headerlink" title="查看设置是否成功"></a>查看设置是否成功</h2><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MYSQL=&quot;/usr/local/mysql/bin/&quot;</span><br><span class="line">export PATH=&quot;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$MYSQL&quot;</span><br></pre></td></tr></table></figure><p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">| character_set_client     | utf8                                                    |</span><br><span class="line">| character_set_connection | utf8                                                    |</span><br><span class="line">| character_set_database   | utf8                                                    |</span><br><span class="line">| character_set_filesystem | binary                                                  |</span><br><span class="line">| character_set_results    | utf8                                                    |</span><br><span class="line">| character_set_server     | utf8                                                    |</span><br><span class="line">| character_set_system     | utf8                                                    |</span><br><span class="line">| character_sets_dir       | /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span><br></pre></td></tr></table></figure><blockquote><p>博客搬家，请访问新博客地址吧! <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习笔记</title>
      <link href="/mysql-study.html"/>
      <url>/mysql-study.html</url>
      
        <content type="html"><![CDATA[<p>** mysql学习笔记：** &lt;Excerpt in index | 首页摘要&gt;<br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="mysql的特点"><a href="#mysql的特点" class="headerlink" title="mysql的特点"></a>mysql的特点</h2><ol><li>关系型数据库，免费使用，</li><li>插入式存储引擎，</li><li>性能高，</li></ol><h2 id="基础的增删改查"><a href="#基础的增删改查" class="headerlink" title="基础的增删改查"></a>基础的增删改查</h2><ol><li><p>ddl语句，数据定义语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create database test1;</span><br><span class="line">drop database test1;</span><br><span class="line">use test1;</span><br><span class="line">create table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2));</span><br><span class="line">drop table emp;</span><br><span class="line">alter table emp modify ename varchar(20);</span><br><span class="line">alter table emp add column age int(3);</span><br><span class="line">alter table emp drop column age;</span><br><span class="line">alter table emp change age age1 int(4);</span><br><span class="line">alter table emp add birth date after ename;</span><br><span class="line">alter table emp modify age int(3) first;</span><br><span class="line">alter table emp rename emp1;</span><br></pre></td></tr></table></figure></li><li><p>dml语句，数据操纵语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">insert into emp(ename,hiredate,sal,deptno) values(&apos;zzx1&apos;,&apos;2000-10-11&apos;,2000,1);</span><br><span class="line">insert into emp values(&apos;lisa&apos;,&apos;2004-05-09&apos;,3000,2);</span><br><span class="line">insert into dept values(5,&apos;dept5&apos;),(6,&apos;dept6&apos;);</span><br><span class="line">update emp set sal=4000 where ename=&apos;lisa&apos;;</span><br><span class="line">update emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno=b.deptno;</span><br><span class="line">delete from emp where ename=&apos;dony&apos;;</span><br><span class="line">delete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;</span><br><span class="line">select * from emp where ename=&apos;lisa&apos;;</span><br><span class="line">select distinct deptno from emp;</span><br><span class="line">select * from emp order by sal(desc);</span><br><span class="line">select * from emp order by sal limit 5;</span><br><span class="line">select * from emp order by sal limit 1,5;ss</span><br></pre></td></tr></table></figure></li><li><p>dcl语句，数据控制语句</p></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><ol><li>尽量使用 prepareStatement(java)，利用预处理功能。</li><li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li><li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li><li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li><li>尽量不使用外连接。</li><li>禁止使用 not in 语句，建议用 not exist。 ★</li><li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li><li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li><li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li><li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li><li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li><li>用多表连接代替 EXISTS 子句。</li><li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li><li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li><li>不允许将 where 子句的条件放到 having 中。</li><li>将更新操作放到事务的最后执行。如</li><li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li><li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li><li>禁止随意使用 distinct，避免造成不必要的排序。</li></ol><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><ol><li><p>创建索引，删除索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create index cityname on city(city(10));</span><br><span class="line">drop index cityname on city;</span><br></pre></td></tr></table></figure></li><li><p>搜索的索引列最好在where的字句或者连接子句</p></li><li><p>使用唯一索引</p></li><li><p>使用短索引，对于较长的字段，使用其前缀做索引</p></li><li><p>不要过度使用索引，索引引起额外的性能开销和维护</p></li></ol><h2 id="高级优化措施"><a href="#高级优化措施" class="headerlink" title="高级优化措施"></a>高级优化措施</h2><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs开发规范</title>
      <link href="/node-develop.html"/>
      <url>/node-develop.html</url>
      
        <content type="html"><![CDATA[<p>** nodejs开发规范：** &lt;Excerpt in index | 首页摘要&gt;<br>    nodejs开发中应当遵循的规范，以及最佳实践</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="node开发需要编程规范吗？"><a href="#node开发需要编程规范吗？" class="headerlink" title="node开发需要编程规范吗？"></a>node开发需要编程规范吗？</h2><ol><li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li><li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li></ol><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><ol><li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p></li><li><p>变量声明</p></li></ol><ul><li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li></ul><p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p><ul><li><p>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</p></li><li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p></li><li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p></li></ul><ol start="3"><li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p></li><li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href="http://cnodejs.org" target="_blank" rel="noopener">CNode</a>‘;<br>在json中使用双引号</p></li><li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p><ol><li><p>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</p></li><li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p></li><li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p></li><li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p></li><li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p></li><li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p></li></ol><h2 id="其它要点"><a href="#其它要点" class="headerlink" title="其它要点"></a>其它要点</h2><ol><li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p></li><li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p></li><li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p></li><li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p></li></ol><h2 id="项目中实践"><a href="#项目中实践" class="headerlink" title="项目中实践"></a>项目中实践</h2><ol><li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p></li><li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>深入浅出nodejs</li><li>js秘密花园</li><li>js高级编程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习笔记</title>
      <link href="/redis-study.html"/>
      <url>/redis-study.html</url>
      
        <content type="html"><![CDATA[<p>** redis学习笔记：** &lt;Excerpt in index | 首页摘要&gt;<br>    redis数据库的基本操作，增删改查</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><p>redis本质上是一个key-value数据库</p><ol><li>设置：set key value</li><li>获取：get key</li><li>判断存在：exists key</li><li>删除：del key        del  test:fan:age</li><li>重命名：rename  oldkey newkey        </li><li>数量：dbsize  返回数据</li><li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li><li>清空：flushdb    flushall</li><li>设置有效时间：expire test:fan:age 30</li><li>查询有效时间：ttl test:fan:age</li></ol><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ol><li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li><li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li><li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li><li>截取：<br> substr key indexStart indexEnd             下标从0开始</li><li>追加：<br> append key value</li></ol><h2 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h2><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p><ol><li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li><li>修改<br> lset key index value  修改指定下标的key的值</li><li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li><li>获取<br> lrange key indexStart indexEnd</li><li>数量<br> llen key        返回key对应的list长度</li><li>截取<br> ltrim key start end</li><li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li></ol><h2 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h2><p>redis的set就是String的无序集合，通过hashtable实现</p><ol><li>添加<br> sadd key member</li><li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li><li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li><li>判断存在<br> sismember key member</li><li>数量<br> scard key                     返回元素个数</li><li>转移<br> smove srckey dstkey member</li><li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li><li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li><li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li></ol><h2 id="有序set类型"><a href="#有序set类型" class="headerlink" title="有序set类型"></a>有序set类型</h2><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p><ol><li>添加<br> zadd key score member</li><li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li><li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li><li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li><li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li><li>修改<br> zincrby key incr member    增加member的score值并排序</li></ol><h2 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h2><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p><ol><li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li><li>获取：<br> hget key field<br> hmget key field1 field2</li><li>判断存在<br> hexists key field</li><li>删除<br> hdel key field</li><li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li><li>数量<br> hlen key</li><li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git比svn的优势</title>
      <link href="/git-svn.html"/>
      <url>/git-svn.html</url>
      
        <content type="html"><![CDATA[<p>** git比svn的优势：** &lt;Excerpt in index | 首页摘要&gt;<br>    主要介绍svn和git在使用的时候一些区别</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="合并操作时对提交过程的保留"><a href="#合并操作时对提交过程的保留" class="headerlink" title="合并操作时对提交过程的保留"></a>合并操作时对提交过程的保留</h2><ul><li>git:合并操作保留原有的提交过程</li><li>svn:多个提交合并为一个提交</li><li>不用因为合并操作而导致追踪的困难</li></ul><h2 id="修正提交"><a href="#修正提交" class="headerlink" title="修正提交"></a>修正提交</h2><ul><li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li><li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li></ul><h2 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h2><ul><li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li></ul><h2 id="强大的合并能力"><a href="#强大的合并能力" class="headerlink" title="强大的合并能力"></a>强大的合并能力</h2><ul><li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p></li><li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p></li><li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p></li></ul><h2 id="tag的支持"><a href="#tag的支持" class="headerlink" title="tag的支持"></a>tag的支持</h2><ul><li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li><li>git模型上一等公民支持tag，保证只读。</li></ul><h2 id="速度优势"><a href="#速度优势" class="headerlink" title="速度优势"></a>速度优势</h2><ul><li>git的提交是个本地提交,相对svn来说如闪电一般</li><li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li></ul><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><ul><li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li><li>svn：需要从服务拉取。</li><li>一旦用了git后，等待svn日志过程简直让我发狂</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java和javascript日期详解</title>
      <link href="/java-date.html"/>
      <url>/java-date.html</url>
      
        <content type="html"><![CDATA[<p>** java，js日期转换：** &lt;Excerpt in index | 首页摘要&gt;<br>    java的各种日期转换</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="日期表示类型"><a href="#日期表示类型" class="headerlink" title="日期表示类型"></a>日期表示类型</h2><ol><li><p>获取long类型的日期格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">System.out.printf(time+<span class="string">""</span>);</span><br><span class="line">Date date =<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date.getTime());</span><br></pre></td></tr></table></figure></li><li><p>获取制定格式的日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">Date date =<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(sdf.format(date) );</span><br></pre></td></tr></table></figure></li><li><p>把制定格式的日期转为date或者毫秒值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">Date date = sdf.parse(<span class="string">"2016-05-22 10:15:21"</span>);</span><br><span class="line"><span class="keyword">long</span> mills = date.getTime();</span><br></pre></td></tr></table></figure></li></ol><ul><li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li></ul><h2 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h2><ol><li>最方便的方式是将时间转为毫秒值进行计算<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date from =<span class="keyword">new</span> Date();</span><br><span class="line">Thread.sleep(<span class="number">200</span>);<span class="comment">//线程休眠2ms</span></span><br><span class="line">Date to =<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(to.getTime()-from.getTime());</span><br></pre></td></tr></table></figure></li></ol><h2 id="高精度时间"><a href="#高精度时间" class="headerlink" title="高精度时间"></a>高精度时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> time1 =System.nanoTime();</span><br><span class="line">System.out.printf(time1+<span class="string">""</span>);</span><br></pre></td></tr></table></figure><ul><li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li></ul><h2 id="javascript日期"><a href="#javascript日期" class="headerlink" title="javascript日期"></a>javascript日期</h2><ol><li><p>获取时间的毫秒值，获取月份，时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.toLocaleString( ); <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure></li><li><p>时间戳获取<br>注意，java，php等生成的时间戳是秒，不是毫秒，所以需要签名时间戳的时候，需要转为秒时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> timestamp = <span class="built_in">parseInt</span>(time.getTime()/<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>格式化时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前时间，格式YYYY-MM-DD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNowFormatDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> seperator1 = <span class="string">"-"</span>;</span><br><span class="line">    <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> strDate = date.getDate();</span><br><span class="line">    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        month = <span class="string">"0"</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        strDate = <span class="string">"0"</span> + strDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> currentdate = year + seperator1 + month + seperator1 + strDate;</span><br><span class="line">    <span class="keyword">return</span> currentdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制定学习目标和计划</title>
      <link href="/study-goals.html"/>
      <url>/study-goals.html</url>
      
        <content type="html"><![CDATA[<p>** 制定学习目标和计划：** &lt;Excerpt in index | 首页摘要&gt;<br>    近期的学习目标和学习重点,提高自己的能力<br> <a id="more"></a><br>&lt;The rest of contents | 余下全文&gt;</p><h2 id="找到自己的兴趣"><a href="#找到自己的兴趣" class="headerlink" title="找到自己的兴趣"></a>找到自己的兴趣</h2><ul><li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li><li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li><li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li></ul><h2 id="制定目标"><a href="#制定目标" class="headerlink" title="制定目标"></a>制定目标</h2><ol><li>为什么要制定目标?</li></ol><ul><li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li></ul><ol start="2"><li>如何制定目标?</li></ol><ul><li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li></ul><h2 id="及时反馈"><a href="#及时反馈" class="headerlink" title="及时反馈"></a>及时反馈</h2><ul><li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ghost搭建个人博客</title>
      <link href="/ghost-blog.html"/>
      <url>/ghost-blog.html</url>
      
        <content type="html"><![CDATA[<p>** 使用ghost搭建个人博客：** &lt;Excerpt in index | 首页摘要&gt;<br>    使用ghost搭建个人博客</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="ghost简介"><a href="#ghost简介" class="headerlink" title="ghost简介"></a>ghost简介</h2><ul><li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li><li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>安装nodejs</li><li>安转git</li><li>配置ssh</li><li>下载ghost</li><li>购买域名</li></ol><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h2 id="定制个人博客"><a href="#定制个人博客" class="headerlink" title="定制个人博客"></a>定制个人博客</h2><h2 id="享受吧"><a href="#享受吧" class="headerlink" title="享受吧"></a>享受吧</h2>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记</title>
      <link href="/git-config-study.html"/>
      <url>/git-config-study.html</url>
      
        <content type="html"><![CDATA[<p>** git学习笔记：** &lt;Excerpt in index | 首页摘要&gt;<br>    git的常用操作，高级技巧都要哦</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ol><li>下载安装包 ￼下载地址￼</li><li>安装git</li><li>进入命令行,输入git看看是否成功</li></ol><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ol><li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email <a href="mailto:johndoe@example.com" target="_blank" rel="noopener">johndoe@example.com</a><br> `</li><li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li></ol><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><ol><li><p>repository操作</p><ul><li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul><li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li><li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li></ul></li><li>查看远程仓库：<code>git remote -v</code></li><li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li><li>删除远程仓库：<code>git remote rm [name]</code></li><li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li><li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li><li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li></ul></li><li><p>提交/拉取/合并/删除</p><ul><li><p>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></p></li><li><p>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></p></li><li><p>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</p></li><li><p>从Git仓库中删除文件：<code>git rm filename</code></p></li><li><p>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></p></li><li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p></li><li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p></li></ul></li><li><p>日志查看</p><ul><li>查看日志：<code>git log</code></li><li>查看日志，并查看每次的修改内容：<code>git log -p</code></li><li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li><li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li><li>查看日志范围：<ul><li>查看最近10条日志：<code>git log -10</code></li><li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li><li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li><li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li></ul></li></ul></li><li><p>取消操作</p><ul><li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li><li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li><li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li><li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul><li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></commitid></commitid></li><li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</commitid></li><li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li></ul></li></ul></li><li><p>比较差异</p><ul><li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li><li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li><li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li></ul></li><li><p>合并操作</p><ul><li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li><li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16服务器环境配置</title>
      <link href="/ubuntu-dev-config.html"/>
      <url>/ubuntu-dev-config.html</url>
      
        <content type="html"><![CDATA[<p>** ubuntu开发环境配置：** &lt;Excerpt in index | 首页摘要&gt;<br>    ubuntu16下node,java开发环境配置<br> <a id="more"></a><br>&lt;The rest of contents | 余下全文&gt;</p><h2 id="ubuntu14升级到ubuntu16"><a href="#ubuntu14升级到ubuntu16" class="headerlink" title="ubuntu14升级到ubuntu16"></a>ubuntu14升级到ubuntu16</h2><ol><li>终端下执行命令<br><code>sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</code></li><li>重启系统以完成更新的安装<br><code>sudo init 6</code></li><li>用命令安装更新管理器核心update-manager-core，如果服务器已安装则可以跳过<br><code>sudo apt-get install update-manager-core</code></li><li>编辑/etc/update-manager/release-upgrades配置文件，设置Prompt=lts<br><code>sudo vi /etc/update-manager/release-upgrades</code></li><li>启动升级进程<br><code>sudo do-release-upgrade -d</code></li></ol><h2 id="安装系统软件"><a href="#安装系统软件" class="headerlink" title="安装系统软件"></a>安装系统软件</h2><ol><li><p>更新系统和软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgade</span><br></pre></td></tr></table></figure></li><li><p>谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse</p></li><li><p>安装搜狗输入法（官网），安装fcitx配置搜狗输入法</p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2></li><li><p>下载jdk并新建一个文件夹</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br></pre></td></tr></table></figure></li><li><p>解压文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf jdk-7u71-linux-x64.tar.gz -C /usr/lib/jvm/jdk1.7</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.7</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>检查是否安装成功<br> 打开shell,</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li><p>nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本</p></li><li><p>安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>安装不同版本的nodejs<br>　　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line">nvm install v0.12.9</span><br><span class="line">nvm install 5.0</span><br><span class="line">nvm use 0.12.9</span><br><span class="line">nvm alias default 0.12.9</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><ol><li><p>配置公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/ubuntu "</span>$(lsb_release -sc)<span class="string">"/mongodb-org/3.0 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</span><br></pre></td></tr></table></figure></li><li><p>更新软件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure></li><li><p>完成上面的安装步骤配置mongodb的数据库的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod --dbpath /data/db</span><br></pre></td></tr></table></figure></li><li><p>启动mongod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod start</span><br><span class="line">sudo service mongod stop</span><br><span class="line">sudo service mongod restart</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ol><li><p>下载软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-2.8.11.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xvfz redis-2.8.11.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.11 &amp;&amp; sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li><li><p>配置使用</p><ol><li><p>下载配置文件和init启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server</span><br><span class="line">wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf</span><br><span class="line">sudo mv redis-server /etc/init.d/redis-server</span><br><span class="line">sudo chmod +x /etc/init.d/redis-server</span><br><span class="line">sudo mv redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>初始化用户和日志路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd redis</span><br><span class="line">sudo mkdir -p /var/lib/redis</span><br><span class="line">sudo mkdir -p /var/<span class="built_in">log</span>/redis</span><br><span class="line">sudo chown redis.redis /var/lib/redis</span><br><span class="line">sudo chown redis.redis /var/<span class="built_in">log</span>/redis</span><br></pre></td></tr></table></figure></li><li><p>设置开机自动启动，关机自动关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d redis-server defaults</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><ol><li>认识环境变量相关的文件</li></ol><ul><li>/etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；</li><li>/etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；</li><li>/etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；</li><li>~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；</li><li>~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；</li></ul><ol start="2"><li>配置环境变量</li></ol><ul><li><p>在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/qtcreator-2.6.1/bin</span><br></pre></td></tr></table></figure></li><li><p>修改profile文件,vim编辑/etc/profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h2><ol><li>zsh命令行工具</li><li>mysql客户端workbench，mongo客户端工具robomongo</li><li>安装git,svn版本控制工具<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install subversion</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的梦想</title>
      <link href="/dream.html"/>
      <url>/dream.html</url>
      
        <content type="html"><![CDATA[<p>** 我的梦想：** &lt;Excerpt in index | 首页摘要&gt;<br>    一个人如果活着没有梦想,那和咸鱼有什么区别?</p><a id="more"></a>请问你的梦想是什么?<p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="我的梦想是什么"><a href="#我的梦想是什么" class="headerlink" title="我的梦想是什么?"></a>我的梦想是什么?</h2><ul><li><p>刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>“我的梦想就是用代码改变世界!”</strong></p></li><li><p>感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?</p></li></ul><h2 id="开始追梦"><a href="#开始追梦" class="headerlink" title="开始追梦"></a>开始追梦</h2><ul><li>有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!</li></ul><h2 id="初级程序员"><a href="#初级程序员" class="headerlink" title="初级程序员"></a>初级程序员</h2><ul><li>虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!</li><li>虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!</li></ul><h2 id="中级程序员"><a href="#中级程序员" class="headerlink" title="中级程序员"></a>中级程序员</h2><ul><li><p>在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.</p></li><li><p>一个成熟的程序员和菜鸟最大的区别应该是心态!</p></li></ul><h2 id="高级程序员"><a href="#高级程序员" class="headerlink" title="高级程序员"></a>高级程序员</h2><ul><li>不再是代码搬运工，根据业务和需求自己随便造个轮子什么的。强大的代码能力，考虑事情应该全面，深刻</li></ul><h2 id="架构师"><a href="#架构师" class="headerlink" title="架构师"></a>架构师</h2><ul><li>未完待续</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员入门指南</title>
      <link href="/coder-study.html"/>
      <url>/coder-study.html</url>
      
        <content type="html"><![CDATA[<p>** 程序员入门指南 ：** &lt;Excerpt in index | 首页摘要&gt;<br>        程序员入门必须了解的一些知识，个人经验，不喜勿喷！</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><h2 id="程序员的入门规划"><a href="#程序员的入门规划" class="headerlink" title="程序员的入门规划"></a>程序员的入门规划</h2><h2 id="1-我该学习什么语言？"><a href="#1-我该学习什么语言？" class="headerlink" title="1.我该学习什么语言？"></a>1.我该学习什么语言？</h2><ul><li><p>这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等</p></li><li><p>个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。</p></li></ul><h2 id="2-我该怎么学习编程？"><a href="#2-我该怎么学习编程？" class="headerlink" title="2.我该怎么学习编程？"></a>2.我该怎么学习编程？</h2><p>这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？</p><p>个人见解：</p><ol><li>先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。</li><li>了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。</li><li>学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解</li><li>学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，</li><li>总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。</li><li>养成写博客或者学习笔记的习惯，推荐写博客，</li><li>熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的</li><li>准备面试，通过面试题进一步巩固自己的知识，夯实基础。</li></ol><h2 id="3-我应该去哪里学习编程？"><a href="#3-我应该去哪里学习编程？" class="headerlink" title="3.我应该去哪里学习编程？"></a>3.我应该去哪里学习编程？</h2><p>其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  </p><ol><li><a href="http://study.163.com/" target="_blank" rel="noopener">网易云课堂</a>，很多免费的视频课程，适合入门学习</li><li><a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a>，很多it入门教学视频，资源也不错</li><li><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a>，和前两个网站差不多，</li><li><a href="http://www.ibeifeng.com/" target="_blank" rel="noopener">北风网</a>，类似的教学网站，其它的就不说了</li></ol><h2 id="4-编程遇到问题怎么办？"><a href="#4-编程遇到问题怎么办？" class="headerlink" title="4.编程遇到问题怎么办？"></a>4.编程遇到问题怎么办？</h2><ul><li>百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了</li><li>去官网查看api文档查找原因</li><li>自己要学会debug代码，查找原因</li><li>去各大论坛逛逛，说不定早有人提问此类问题了</li></ul><h2 id="5-我想看编程的书籍去哪找呢？"><a href="#5-我想看编程的书籍去哪找呢？" class="headerlink" title="5.我想看编程的书籍去哪找呢？"></a>5.我想看编程的书籍去哪找呢？</h2><p>经典书籍还是买纸质的，买正版的，支持正版！</p><ol><li><a href="http://vdisk.weibo.com/" target="_blank" rel="noopener">新浪微盘</a>，非常多的it书籍  </li><li><a href="http://www.jb51.net/" target="_blank" rel="noopener">脚本之家</a>，非常多的pdf书籍，可惜大多数不是文字版pdf  </li><li><a href="http://www.salttiger.com/" target="_blank" rel="noopener">英文原版书籍</a>，都是高清文字版pdf，强烈推荐，都是英文原版的  </li><li><a href="http://bestcbooks.com/" target="_blank" rel="noopener">计算机书控</a>，都是免费的pdf文档，大多数不是文字版pdf</li></ol><h2 id="6-代码资源"><a href="#6-代码资源" class="headerlink" title="6.代码资源"></a>6.代码资源</h2><ol><li>最好的代码仓库 <a href="https://github.com/" target="_blank" rel="noopener">github</a></li><li><a href="https://code.csdn.net/" target="_blank" rel="noopener">csdn代码仓库</a></li><li><a href="https://gist.github.com/" target="_blank" rel="noopener">gist</a></li><li><a href="http://www.phpxs.com/code/" target="_blank" rel="noopener">代码片段之家</a></li></ol><h2 id="7-学习心态"><a href="#7-学习心态" class="headerlink" title="7.学习心态"></a>7.学习心态</h2><ol><li>不要老是折腾工具，ide工具和文本编辑器一样一个就够了</li><li>不要自满，编程的东西学一辈子也学不会，要谦虚好学</li><li>不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习</li><li>要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好</li><li>切忌眼高手低，必须要敲代码才能达到效果</li></ol><h2 id="8-编程进阶之路"><a href="#8-编程进阶之路" class="headerlink" title="8.编程进阶之路"></a>8.编程进阶之路</h2><p>当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?怎么去学,这些真的很难</p><ul><li>个人建议如下:<br>1.技术型方向:提高自己的编程能力和语言造诣,最有效的是”造轮子”,量变引起质变</li><li>写插件,写框架,写爬虫,写数据库,自制编程语言,等等.<br>2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题</li><li>多出去见客户,去现场,了解需求,分析需求,</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo和github打造个人博客</title>
      <link href="/hexo-githup-blog.html"/>
      <url>/hexo-githup-blog.html</url>
      
        <content type="html"><![CDATA[<p>** hexo和github打造个人博客 ：** &lt;Excerpt in index | 首页摘要&gt;<br>    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……</p><a id="more"></a><p>&lt;The rest of contents | 余下全文&gt;</p><p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"><strong>hexo官网</strong></a></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li>安装nodejs<ul><li>去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li></ul></li><li>安装hexo<ul><li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1以上</strong>版本</li></ul></li><li>安装git<ul><li>去官网下载git安装,不会自行百度</li></ul></li><li>配置git<ul><li>配置ssh私钥,上传到github上</li></ul></li></ol><h2 id="2-github-pages的说明"><a href="#2-github-pages的说明" class="headerlink" title="2.github-pages的说明"></a>2.github-pages的说明</h2><ol><li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li><li>github-page需要将hexo博客发布到repository的master(主干)即可</li><li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io</li></ol><h2 id="3-使用hexo写博客"><a href="#3-使用hexo写博客" class="headerlink" title="3.使用hexo写博客"></a>3.使用hexo写博客</h2><pre><code>- 新建一个文件夹myblog,- 右键git bash here使用git的shell- 在shell中输入hexo init,回车执行- 在shell中输入hexo g ,回车- 在shell中hexo s,回车- 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止- 在shell中hexo new &quot;first-blog&quot;,回车- 在shell中hexo g ,回车- 在shell中hexo s ,回车,在访问- ok,在本地测试就没问题了</code></pre><h2 id="4-发布到github"><a href="#4-发布到github" class="headerlink" title="4.发布到github"></a>4.发布到github</h2><p>打开项目根部录下的.config.yml,找到deploy,修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> - type: git</span><br><span class="line">   repo: git@github.com:yourname/yourname.github.io.git,master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>访问地址就是 <a href="http://tom.github.io/" target="_blank" rel="noopener">http://tom.github.io/</a></p><h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5.常用命令"></a>5.常用命令</h2><pre><code>命令的简写为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo clean  删除public文件夹</span><br></pre></td></tr></table></figure></code></pre><h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6.常见问题"></a>6.常见问题</h2><ol><li>部署时出现git not found<ul><li>npm install hexo-deployer-git –save  安装依赖包</li></ul></li></ol><h2 id="7-详细设置"><a href="#7-详细设置" class="headerlink" title="7.详细设置"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  这些对程序员的你来说，都是小菜一碟，下面是官网教程：</code></pre><p>   <a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><p>博客效果可以看我的个人博客     <a href="https://www.duduhuahua.cn" target="_blank" rel="noopener">我的个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习</title>
      <link href="/node-study.html"/>
      <url>/node-study.html</url>
      
        <content type="html"><![CDATA[<p>** node学习： ** &lt;Excerpt in index | 首页摘要&gt;<br>    nodejs学习的方法，进阶路线<br> <a id="more"></a><br>&lt;The rest of contents | 余下全文&gt;</p><h2 id="一-学习内容"><a href="#一-学习内容" class="headerlink" title="一 学习内容"></a>一 学习内容</h2><ol><li>node的常用模块,buffer,fs,http,net等.</li><li>node常用框架express,mongoose,koa,mocha,should</li><li>部署上线,pm2,grunt,</li></ol><h2 id="二-学习要点"><a href="#二-学习要点" class="headerlink" title="二 学习要点"></a>二 学习要点</h2><ol><li>了解node的特性和语法</li><li>编写扩展node模块</li><li>用异步的思想编程</li><li>常用框架的使用</li><li>回调的解决方案(promise)</li></ol><h2 id="三-入门实战"><a href="#三-入门实战" class="headerlink" title="三 入门实战"></a>三 入门实战</h2><ol><li>参照nodejs实战上的微博系统,使用express4.x+ mongoose实现</li><li>使用socket.io实现一个简单的即时聊天的系统</li><li>使用mongoose+express+node开发一个论坛系统</li><li>使用koa+mongoose做一个简单的cms或者权限系统</li></ol><h2 id="四-学习方法"><a href="#四-学习方法" class="headerlink" title="四 学习方法"></a>四 学习方法</h2><ul><li>建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书</li><li>不要一直看书,没什么效果的,实战永远是最有效的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
